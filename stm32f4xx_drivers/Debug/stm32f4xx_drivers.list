
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025cc  080025cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080025cc  080025cc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025cc  080025cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d0  080025d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080025d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000024c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000023bb  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000009ff  00000000  00000000  000224a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002e0  00000000  00000000  00022ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000021b  00000000  00000000  00023188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003137  00000000  00000000  000233a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000036c6  00000000  00000000  000264da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000b991  00000000  00000000  00029ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000014b8  00000000  00000000  00035534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  000369ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800252c 	.word	0x0800252c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800252c 	.word	0x0800252c

080001c8 <ds1307_i2c_pin_config>:


/************************************Helper Functions ********************************************************/

static void ds1307_i2c_pin_config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	220c      	movs	r2, #12
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fd84 	bl	8001ce4 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80001dc:	463b      	mov	r3, r7
 80001de:	220c      	movs	r2, #12
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fd7e 	bl	8001ce4 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80001e8:	4b14      	ldr	r3, [pc, #80]	; (800023c <ds1307_i2c_pin_config+0x74>)
 80001ea:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001ec:	2304      	movs	r3, #4
 80001ee:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f0:	2302      	movs	r3, #2
 80001f2:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80001f4:	2307      	movs	r3, #7
 80001f6:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001f8:	2301      	movs	r3, #1
 80001fa:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80001fc:	2301      	movs	r3, #1
 80001fe:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 8000200:	2302      	movs	r3, #2
 8000202:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fe55 	bl	8000eb8 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <ds1307_i2c_pin_config+0x74>)
 8000210:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000212:	2304      	movs	r3, #4
 8000214:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000216:	2302      	movs	r3, #2
 8000218:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800021a:	2306      	movs	r3, #6
 800021c:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800021e:	2301      	movs	r3, #1
 8000220:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000222:	2301      	movs	r3, #1
 8000224:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 8000226:	2302      	movs	r3, #2
 8000228:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 800022a:	463b      	mov	r3, r7
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fe43 	bl	8000eb8 <GPIO_Init>

}
 8000232:	bf00      	nop
 8000234:	3718      	adds	r7, #24
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40020400 	.word	0x40020400

08000240 <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <ds1307_i2c_config+0x20>)
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <ds1307_i2c_config+0x24>)
 8000248:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <ds1307_i2c_config+0x20>)
 800024c:	2201      	movs	r2, #1
 800024e:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <ds1307_i2c_config+0x20>)
 8000252:	4a05      	ldr	r2, [pc, #20]	; (8000268 <ds1307_i2c_config+0x28>)
 8000254:	605a      	str	r2, [r3, #4]

	I2C_Init(&g_ds1307I2cHandle);
 8000256:	4802      	ldr	r0, [pc, #8]	; (8000260 <ds1307_i2c_config+0x20>)
 8000258:	f001 f926 	bl	80014a8 <I2C_Init>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000094 	.word	0x20000094
 8000264:	40005400 	.word	0x40005400
 8000268:	000186a0 	.word	0x000186a0

0800026c <ds1307_write>:


static void ds1307_write(uint8_t value, uint8_t reg_addr)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af02      	add	r7, sp, #8
 8000272:	4603      	mov	r3, r0
 8000274:	460a      	mov	r2, r1
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000284:	f107 010c 	add.w	r1, r7, #12
 8000288:	2300      	movs	r3, #0
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2368      	movs	r3, #104	; 0x68
 800028e:	2202      	movs	r2, #2
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <ds1307_write+0x34>)
 8000292:	f001 f9d1 	bl	8001638 <I2C_MasterSendData>
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000094 	.word	0x20000094

080002a4 <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 80002ae:	1df9      	adds	r1, r7, #7
 80002b0:	2300      	movs	r3, #0
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2368      	movs	r3, #104	; 0x68
 80002b6:	2201      	movs	r2, #1
 80002b8:	4808      	ldr	r0, [pc, #32]	; (80002dc <ds1307_read+0x38>)
 80002ba:	f001 f9bd 	bl	8001638 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 80002be:	f107 010f 	add.w	r1, r7, #15
 80002c2:	2300      	movs	r3, #0
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2368      	movs	r3, #104	; 0x68
 80002c8:	2201      	movs	r2, #1
 80002ca:	4804      	ldr	r0, [pc, #16]	; (80002dc <ds1307_read+0x38>)
 80002cc:	f001 fa18 	bl	8001700 <I2C_MasterReceiveData>

    return data;
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000094 	.word	0x20000094

080002e0 <binary_to_bcd>:


static uint8_t binary_to_bcd(uint8_t value)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b09      	cmp	r3, #9
 80002f2:	d918      	bls.n	8000326 <binary_to_bcd+0x46>
	{
		m = value /10; // Tenths place
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <binary_to_bcd+0x54>)
 80002f8:	fba2 2303 	umull	r2, r3, r2, r3
 80002fc:	08db      	lsrs	r3, r3, #3
 80002fe:	73bb      	strb	r3, [r7, #14]
		n = value % 10; // Units place
 8000300:	79fa      	ldrb	r2, [r7, #7]
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <binary_to_bcd+0x54>)
 8000304:	fba3 1302 	umull	r1, r3, r3, r2
 8000308:	08d9      	lsrs	r1, r3, #3
 800030a:	460b      	mov	r3, r1
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	440b      	add	r3, r1
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	b25a      	sxtb	r2, r3
 800031c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000320:	4313      	orrs	r3, r2
 8000322:	b25b      	sxtb	r3, r3
 8000324:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000326:	7bfb      	ldrb	r3, [r7, #15]
}
 8000328:	4618      	mov	r0, r3
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	cccccccd 	.word	0xcccccccd

08000338 <bcd_to_binary>:


static uint8_t bcd_to_binary(uint8_t value)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	091b      	lsrs	r3, r3, #4
 8000346:	b2db      	uxtb	r3, r3
 8000348:	461a      	mov	r2, r3
 800034a:	0092      	lsls	r2, r2, #2
 800034c:	4413      	add	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	f003 030f 	and.w	r3, r3, #15
 8000358:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 800035a:	7bfa      	ldrb	r2, [r7, #15]
 800035c:	7bbb      	ldrb	r3, [r7, #14]
 800035e:	4413      	add	r3, r2
 8000360:	b2db      	uxtb	r3, r3
}
 8000362:	4618      	mov	r0, r3
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <ds1307_init>:
						returns 0 : CH = 0 ; init success

 *********************************************************************************************/

uint8_t ds1307_init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

	//1. Initializing the I2C Pins
	ds1307_i2c_pin_config();
 8000376:	f7ff ff27 	bl	80001c8 <ds1307_i2c_pin_config>

	//2. initialize the I2C Peripheral
	ds1307_i2c_config();
 800037a:	f7ff ff61 	bl	8000240 <ds1307_i2c_config>

	//3. Enabling the I2C Peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <ds1307_init+0x38>)
 8000382:	f001 f83d 	bl	8001400 <I2C_PeripheralControl>

	//4. Make CH = 0 for resuming the internal clock
	ds1307_write(0x00,DS1307_ADDR_SEC);
 8000386:	2100      	movs	r1, #0
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ff6f 	bl	800026c <ds1307_write>

	//5. Read back CH bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ff88 	bl	80002a4 <ds1307_read>
 8000394:	4603      	mov	r3, r0
 8000396:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	09db      	lsrs	r3, r3, #7
 800039c:	b2db      	uxtb	r3, r3

}
 800039e:	4618      	mov	r0, r3
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40005400 	.word	0x40005400

080003ac <ds1307_set_current_time>:
 * @Note              - None

 *********************************************************************************************/

void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	//seconds
	seconds = binary_to_bcd(rtc_time->seconds);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff91 	bl	80002e0 <binary_to_bcd>
 80003be:	4603      	mov	r3, r0
 80003c0:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80003c2:	7bbb      	ldrb	r3, [r7, #14]
 80003c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003c8:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80003ca:	7bbb      	ldrb	r3, [r7, #14]
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff4c 	bl	800026c <ds1307_write>

	//Minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	785b      	ldrb	r3, [r3, #1]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff81 	bl	80002e0 <binary_to_bcd>
 80003de:	4603      	mov	r3, r0
 80003e0:	2101      	movs	r1, #1
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff42 	bl	800026c <ds1307_write>

	//Hours
	hours = binary_to_bcd(rtc_time->hours);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	789b      	ldrb	r3, [r3, #2]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff77 	bl	80002e0 <binary_to_bcd>
 80003f2:	4603      	mov	r3, r0
 80003f4:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	78db      	ldrb	r3, [r3, #3]
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d104      	bne.n	8000408 <ds1307_set_current_time+0x5c>
	{
		// 24-hour format
		hours &= ~(1 << 6);
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e011      	b.n	800042c <ds1307_set_current_time+0x80>
	}else
	{
		//12-hour format
		hours |= (1 << 6);
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040e:	73fb      	strb	r3, [r7, #15]
		hours = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hours | ( 1 << 5) :  hours & ~( 1 << 5) ;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	78db      	ldrb	r3, [r3, #3]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d104      	bne.n	8000422 <ds1307_set_current_time+0x76>
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	b2db      	uxtb	r3, r3
 8000420:	e003      	b.n	800042a <ds1307_set_current_time+0x7e>
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	f023 0320 	bic.w	r3, r3, #32
 8000428:	b2db      	uxtb	r3, r3
 800042a:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hours,DS1307_ADDR_HRS);
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	2102      	movs	r1, #2
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff1b 	bl	800026c <ds1307_write>
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <ds1307_set_current_date>:
 *
 * @Note              - None

 *********************************************************************************************/
void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
	//Day
	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	78db      	ldrb	r3, [r3, #3]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff48 	bl	80002e0 <binary_to_bcd>
 8000450:	4603      	mov	r3, r0
 8000452:	2103      	movs	r1, #3
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff09 	bl	800026c <ds1307_write>

	//Date
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff3e 	bl	80002e0 <binary_to_bcd>
 8000464:	4603      	mov	r3, r0
 8000466:	2104      	movs	r1, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff feff 	bl	800026c <ds1307_write>

	//Month
	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	785b      	ldrb	r3, [r3, #1]
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff34 	bl	80002e0 <binary_to_bcd>
 8000478:	4603      	mov	r3, r0
 800047a:	2105      	movs	r1, #5
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fef5 	bl	800026c <ds1307_write>

	//Year
	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	789b      	ldrb	r3, [r3, #2]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff2a 	bl	80002e0 <binary_to_bcd>
 800048c:	4603      	mov	r3, r0
 800048e:	2106      	movs	r1, #6
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff feeb 	bl	800026c <ds1307_write>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <ds1307_get_current_time>:
 *
 * @Note              - None

 *********************************************************************************************/
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b084      	sub	sp, #16
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hours;

	//Seconds
	seconds = ds1307_read(DS1307_ADDR_SEC);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff fefc 	bl	80002a4 <ds1307_read>
 80004ac:	4603      	mov	r3, r0
 80004ae:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004b6:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff3c 	bl	8000338 <bcd_to_binary>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461a      	mov	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	701a      	strb	r2, [r3, #0]

	//Minutes
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80004c8:	2001      	movs	r0, #1
 80004ca:	f7ff feeb 	bl	80002a4 <ds1307_read>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff31 	bl	8000338 <bcd_to_binary>
 80004d6:	4603      	mov	r3, r0
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	705a      	strb	r2, [r3, #1]

	//Hours
	hours = ds1307_read(DS1307_ADDR_HRS);
 80004de:	2002      	movs	r0, #2
 80004e0:	f7ff fee0 	bl	80002a4 <ds1307_read>
 80004e4:	4603      	mov	r3, r0
 80004e6:	73fb      	strb	r3, [r7, #15]
	if(hours & ( 1 << 6))
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00f      	beq.n	8000512 <ds1307_get_current_time+0x74>
	{
		//12 hr format
		rtc_time->time_format =  !((hours & ( 1 << 5)) == 0) ;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf14      	ite	ne
 80004fc:	2301      	movne	r3, #1
 80004fe:	2300      	moveq	r3, #0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	70da      	strb	r2, [r3, #3]
		hours &= ~(0x3 << 5);//Clear 6 and 5
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	e002      	b.n	8000518 <ds1307_get_current_time+0x7a>
	}else
	{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2202      	movs	r2, #2
 8000516:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hours);
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff0c 	bl	8000338 <bcd_to_binary>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	709a      	strb	r2, [r3, #2]
}
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <ds1307_get_current_date>:
 *
 * @Note              - None

 *********************************************************************************************/
void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	//Day
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000538:	2003      	movs	r0, #3
 800053a:	f7ff feb3 	bl	80002a4 <ds1307_read>
 800053e:	4603      	mov	r3, r0
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fef9 	bl	8000338 <bcd_to_binary>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	70da      	strb	r2, [r3, #3]

	//Date
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800054e:	2004      	movs	r0, #4
 8000550:	f7ff fea8 	bl	80002a4 <ds1307_read>
 8000554:	4603      	mov	r3, r0
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff feee 	bl	8000338 <bcd_to_binary>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	701a      	strb	r2, [r3, #0]

	//Month
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000564:	2005      	movs	r0, #5
 8000566:	f7ff fe9d 	bl	80002a4 <ds1307_read>
 800056a:	4603      	mov	r3, r0
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fee3 	bl	8000338 <bcd_to_binary>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	705a      	strb	r2, [r3, #1]

	//Year
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800057a:	2006      	movs	r0, #6
 800057c:	f7ff fe92 	bl	80002a4 <ds1307_read>
 8000580:	4603      	mov	r3, r0
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fed8 	bl	8000338 <bcd_to_binary>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	709a      	strb	r2, [r3, #2]

}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <mdelay>:
static void udelay(uint32_t cnt);

/************************************Helper Functions ********************************************************/

static void mdelay(uint32_t cnt)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e002      	b.n	80005ac <mdelay+0x14>
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3f4      	bcc.n	80005a6 <mdelay+0xe>
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <udelay>:


static void udelay(uint32_t cnt)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e002      	b.n	80005de <udelay+0x14>
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d3f8      	bcc.n	80005d8 <udelay+0xe>
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <write_4_bits>:


static void write_4_bits(uint8_t value)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	2103      	movs	r1, #3
 800060a:	4815      	ldr	r0, [pc, #84]	; (8000660 <write_4_bits+0x6c>)
 800060c:	f000 fe1a 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	085b      	lsrs	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	2104      	movs	r1, #4
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <write_4_bits+0x6c>)
 8000622:	f000 fe0f 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	2105      	movs	r1, #5
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <write_4_bits+0x6c>)
 8000638:	f000 fe04 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	2106      	movs	r1, #6
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <write_4_bits+0x6c>)
 800064e:	f000 fdf9 	bl	8001244 <GPIO_WriteToOutputPin>

	lcd_enable();
 8000652:	f000 f807 	bl	8000664 <lcd_enable>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00

08000664 <lcd_enable>:


static void lcd_enable(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	//Setting enable
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2102      	movs	r1, #2
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <lcd_enable+0x28>)
 800066e:	f000 fde9 	bl	8001244 <GPIO_WriteToOutputPin>

	//waiting for 10 microseconds
	udelay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f7ff ffa9 	bl	80005ca <udelay>

	//Resetting enable
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2102      	movs	r1, #2
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <lcd_enable+0x28>)
 800067e:	f000 fde1 	bl	8001244 <GPIO_WriteToOutputPin>

	//waiting for 100 microseconds (execution time > 37 micro seconds)
	udelay(100);
 8000682:	2064      	movs	r0, #100	; 0x64
 8000684:	f7ff ffa1 	bl	80005ca <udelay>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020c00 	.word	0x40020c00

08000690 <lcd_send_command>:


void lcd_send_command(uint8_t cmd)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	// RS=0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <lcd_send_command+0x40>)
 80006a0:	f000 fdd0 	bl	8001244 <GPIO_WriteToOutputPin>

	//R/nW = 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2101      	movs	r1, #1
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <lcd_send_command+0x40>)
 80006aa:	f000 fdcb 	bl	8001244 <GPIO_WriteToOutputPin>

	//Sending higher nibble
	write_4_bits(cmd >> 4);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	091b      	lsrs	r3, r3, #4
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff9d 	bl	80005f4 <write_4_bits>

	//Sending lower nibble
	write_4_bits(cmd & 0x0F);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff96 	bl	80005f4 <write_4_bits>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <lcd_print_char>:


void lcd_print_char(uint8_t data)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	// RS=1
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2100      	movs	r1, #0
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <lcd_print_char+0x40>)
 80006e4:	f000 fdae 	bl	8001244 <GPIO_WriteToOutputPin>

	//R/nW = 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <lcd_print_char+0x40>)
 80006ee:	f000 fda9 	bl	8001244 <GPIO_WriteToOutputPin>

	//Sending higher nibble
	write_4_bits(data >> 4);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	091b      	lsrs	r3, r3, #4
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff7b 	bl	80005f4 <write_4_bits>

	//Sending lower nibble
	write_4_bits(data & 0x0F);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff74 	bl	80005f4 <write_4_bits>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40020c00 	.word	0x40020c00

08000718 <lcd_display_clear>:


void lcd_display_clear(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	//Display clear command
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff ffb7 	bl	8000690 <lcd_send_command>

	// display clear command execution wait time is around 2ms
	mdelay(2);
 8000722:	2002      	movs	r0, #2
 8000724:	f7ff ff38 	bl	8000598 <mdelay>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <lcd_print_string>:


void lcd_print_string(char *message)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
      do
      {
          lcd_print_char((uint8_t)*message++);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffc9 	bl	80006d4 <lcd_print_char>
      }
      while (*message != '\0');
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f4      	bne.n	8000734 <lcd_print_string+0x8>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lcd_display_return_home>:


void lcd_display_return_home(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	//Display return home command
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff ff99 	bl	8000690 <lcd_send_command>

	// display return home command execution wait time is around 2ms
	mdelay(2);
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff ff1a 	bl	8000598 <mdelay>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcd_set_cursor>:


void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
  column--;
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	3b01      	subs	r3, #1
 800077c:	71bb      	strb	r3, [r7, #6]
  switch (row)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d002      	beq.n	800078a <lcd_set_cursor+0x22>
 8000784:	2b02      	cmp	r3, #2
 8000786:	d009      	beq.n	800079c <lcd_set_cursor+0x34>
    case 2:
      // Set cursor to 2nd row address and add index
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000788:	e011      	b.n	80007ae <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000790:	71bb      	strb	r3, [r7, #6]
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff7b 	bl	8000690 <lcd_send_command>
      break;
 800079a:	e008      	b.n	80007ae <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80007a2:	71bb      	strb	r3, [r7, #6]
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff72 	bl	8000690 <lcd_send_command>
      break;
 80007ac:	bf00      	nop
  }
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <lcd_init>:
 *
 * @Note              - none
 *
 *********************************************************************************************/
void lcd_init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	//RS
	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <lcd_init+0x110>)
 80007c0:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007c2:	2301      	movs	r3, #1
 80007c4:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 80007c6:	2300      	movs	r3, #0
 80007c8:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007ca:	2300      	movs	r3, #0
 80007cc:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80007ce:	2300      	movs	r3, #0
 80007d0:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 80007d2:	2302      	movs	r3, #2
 80007d4:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&lcd_signal);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fb6d 	bl	8000eb8 <GPIO_Init>

	//RW
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 80007de:	2301      	movs	r3, #1
 80007e0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fb67 	bl	8000eb8 <GPIO_Init>

	//EN
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 80007ea:	2302      	movs	r3, #2
 80007ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fb61 	bl	8000eb8 <GPIO_Init>

	//D4
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 80007f6:	2303      	movs	r3, #3
 80007f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fb5b 	bl	8000eb8 <GPIO_Init>

	//D5
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000802:	2304      	movs	r3, #4
 8000804:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fb55 	bl	8000eb8 <GPIO_Init>

	//D6
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 800080e:	2305      	movs	r3, #5
 8000810:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fb4f 	bl	8000eb8 <GPIO_Init>

	//D7
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 800081a:	2306      	movs	r3, #6
 800081c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fb49 	bl	8000eb8 <GPIO_Init>

	// Logic 0 -> Initially for all the pins
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	4827      	ldr	r0, [pc, #156]	; (80008c8 <lcd_init+0x110>)
 800082c:	f000 fd0a 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	4824      	ldr	r0, [pc, #144]	; (80008c8 <lcd_init+0x110>)
 8000836:	f000 fd05 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <lcd_init+0x110>)
 8000840:	f000 fd00 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2103      	movs	r1, #3
 8000848:	481f      	ldr	r0, [pc, #124]	; (80008c8 <lcd_init+0x110>)
 800084a:	f000 fcfb 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2104      	movs	r1, #4
 8000852:	481d      	ldr	r0, [pc, #116]	; (80008c8 <lcd_init+0x110>)
 8000854:	f000 fcf6 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2105      	movs	r1, #5
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <lcd_init+0x110>)
 800085e:	f000 fcf1 	bl	8001244 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2106      	movs	r1, #6
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <lcd_init+0x110>)
 8000868:	f000 fcec 	bl	8001244 <GPIO_WriteToOutputPin>


	//2. Do the LCD initialization

	// waiting foe 40 milliseconds
	mdelay(40);
 800086c:	2028      	movs	r0, #40	; 0x28
 800086e:	f7ff fe93 	bl	8000598 <mdelay>

	//RS is pulled to LOW(0)
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <lcd_init+0x110>)
 8000878:	f000 fce4 	bl	8001244 <GPIO_WriteToOutputPin>

	// RnW is pulled to LOW(0)
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2101      	movs	r1, #1
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <lcd_init+0x110>)
 8000882:	f000 fcdf 	bl	8001244 <GPIO_WriteToOutputPin>

	//Writing as per flow chart 4 bits of data/command on to D4,D5,D6,D7 lines */
	write_4_bits(0x3);
 8000886:	2003      	movs	r0, #3
 8000888:	f7ff feb4 	bl	80005f4 <write_4_bits>

	//waiting for more than 4.1 milliseconds
	mdelay(5);
 800088c:	2005      	movs	r0, #5
 800088e:	f7ff fe83 	bl	8000598 <mdelay>

	//Writing as per flow chart 4 bits of data/command on to D4,D5,D6,D7 lines */
	write_4_bits(0x3);
 8000892:	2003      	movs	r0, #3
 8000894:	f7ff feae 	bl	80005f4 <write_4_bits>

	//waiting for more than 100 microseconds
	udelay(150);
 8000898:	2096      	movs	r0, #150	; 0x96
 800089a:	f7ff fe96 	bl	80005ca <udelay>

	//Writing as per flow chart 4 bits of data/command on to D4,D5,D6,D7 lines */
	write_4_bits(0x3);
 800089e:	2003      	movs	r0, #3
 80008a0:	f7ff fea8 	bl	80005f4 <write_4_bits>

	//Writing as per flow chart 4 bits of data/command on to D4,D5,D6,D7 lines */
	write_4_bits(0x2);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fea5 	bl	80005f4 <write_4_bits>

	//1. function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 80008aa:	2028      	movs	r0, #40	; 0x28
 80008ac:	f7ff fef0 	bl	8000690 <lcd_send_command>

	//2. disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 80008b0:	200e      	movs	r0, #14
 80008b2:	f7ff feed 	bl	8000690 <lcd_send_command>

	//3. display Clear
	lcd_display_clear();
 80008b6:	f7ff ff2f 	bl	8000718 <lcd_display_clear>

	//4. entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 80008ba:	2006      	movs	r0, #6
 80008bc:	f7ff fee8 	bl	8000690 <lcd_send_command>

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40020c00 	.word	0x40020c00

080008cc <mdelay>:

// LCD printing macro
#define PRINT_LCD

static void mdelay(uint32_t count)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (count * 1000); i++);
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e002      	b.n	80008e0 <mdelay+0x14>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3f4      	bcc.n	80008da <mdelay+0xe>
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <init_systick_timer>:

//SYSTICK Timer Initialization
void init_systick_timer(uint32_t tick_hz)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <init_systick_timer+0x60>)
 800090a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <init_systick_timer+0x64>)
 800090e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <init_systick_timer+0x68>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	fbb2 f3f3 	udiv	r3, r2, r3
 8000918:	3b01      	subs	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	431a      	orrs	r2, r3
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f043 0202 	orr.w	r2, r3, #2
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f043 0204 	orr.w	r2, r3, #4
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f043 0201 	orr.w	r2, r3, #1
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	601a      	str	r2, [r3, #0]

}
 8000952:	bf00      	nop
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e014 	.word	0xe000e014
 8000964:	e000e010 	.word	0xe000e010
 8000968:	00f42400 	.word	0x00f42400

0800096c <get_day_of_week>:

//Day of the week in string
char* get_day_of_week(uint8_t i)
{
 800096c:	b4b0      	push	{r4, r5, r7}
 800096e:	b08b      	sub	sp, #44	; 0x2c
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <get_day_of_week+0x38>)
 8000978:	f107 040c 	add.w	r4, r7, #12
 800097c:	461d      	mov	r5, r3
 800097e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000982:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000986:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	3b01      	subs	r3, #1
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	3328      	adds	r3, #40	; 0x28
 8000992:	443b      	add	r3, r7
 8000994:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000998:	4618      	mov	r0, r3
 800099a:	372c      	adds	r7, #44	; 0x2c
 800099c:	46bd      	mov	sp, r7
 800099e:	bcb0      	pop	{r4, r5, r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	08002588 	.word	0x08002588

080009a8 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]

	if(num < 10)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b09      	cmp	r3, #9
 80009b8:	d809      	bhi.n	80009ce <number_to_string+0x26>
	{
		buf[0] = '0';
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2230      	movs	r2, #48	; 0x30
 80009be:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	3230      	adds	r2, #48	; 0x30
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80009cc:	e01f      	b.n	8000a0e <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b09      	cmp	r3, #9
 80009d2:	d91c      	bls.n	8000a0e <number_to_string+0x66>
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b62      	cmp	r3, #98	; 0x62
 80009d8:	d819      	bhi.n	8000a0e <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <number_to_string+0x74>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3330      	adds	r3, #48	; 0x30
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <number_to_string+0x74>)
 80009f2:	fba3 1302 	umull	r1, r3, r3, r2
 80009f6:	08d9      	lsrs	r1, r3, #3
 80009f8:	460b      	mov	r3, r1
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	440b      	add	r3, r1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	3230      	adds	r2, #48	; 0x30
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	701a      	strb	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	cccccccd 	.word	0xcccccccd

08000a20 <time_to_string>:

// Time format - hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <time_to_string+0x48>)
 8000a2a:	223a      	movs	r2, #58	; 0x3a
 8000a2c:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <time_to_string+0x48>)
 8000a30:	223a      	movs	r2, #58	; 0x3a
 8000a32:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	789b      	ldrb	r3, [r3, #2]
 8000a38:	490b      	ldr	r1, [pc, #44]	; (8000a68 <time_to_string+0x48>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffb4 	bl	80009a8 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	4909      	ldr	r1, [pc, #36]	; (8000a6c <time_to_string+0x4c>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffae 	bl	80009a8 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <time_to_string+0x50>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffa8 	bl	80009a8 <number_to_string>

	buf[8] = '\0';
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <time_to_string+0x48>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	721a      	strb	r2, [r3, #8]

	return buf;
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <time_to_string+0x48>)
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000bc 	.word	0x200000bc
 8000a6c:	200000bf 	.word	0x200000bf
 8000a70:	200000c2 	.word	0x200000c2

08000a74 <date_to_string>:


//Date format - dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <date_to_string+0x48>)
 8000a7e:	222f      	movs	r2, #47	; 0x2f
 8000a80:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <date_to_string+0x48>)
 8000a84:	222f      	movs	r2, #47	; 0x2f
 8000a86:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	490b      	ldr	r1, [pc, #44]	; (8000abc <date_to_string+0x48>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff8a 	bl	80009a8 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	4909      	ldr	r1, [pc, #36]	; (8000ac0 <date_to_string+0x4c>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff84 	bl	80009a8 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <date_to_string+0x50>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff7e 	bl	80009a8 <number_to_string>

	buf[8]= '\0';
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <date_to_string+0x48>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	721a      	strb	r2, [r3, #8]

	return buf;
 8000ab2:	4b02      	ldr	r3, [pc, #8]	; (8000abc <date_to_string+0x48>)
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	200000cb 	.word	0x200000cb
 8000ac4:	200000ce 	.word	0x200000ce

08000ac8 <main>:




int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	lcd_init();
 8000ace:	f7ff fe73 	bl	80007b8 <lcd_init>

	lcd_print_string("RTC Test...");
 8000ad2:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <main+0xd8>)
 8000ad4:	f7ff fe2a 	bl	800072c <lcd_print_string>


	mdelay(2000);
 8000ad8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000adc:	f7ff fef6 	bl	80008cc <mdelay>

	lcd_display_clear();
 8000ae0:	f7ff fe1a 	bl	8000718 <lcd_display_clear>
	lcd_display_return_home();
 8000ae4:	f7ff fe36 	bl	8000754 <lcd_display_return_home>
#endif

	if(ds1307_init()){
 8000ae8:	f7ff fc42 	bl	8000370 <ds1307_init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <main+0x32>
		printf("RTC init has failed\n");
 8000af2:	482c      	ldr	r0, [pc, #176]	; (8000ba4 <main+0xdc>)
 8000af4:	f001 f816 	bl	8001b24 <puts>
		while(1);
 8000af8:	e7fe      	b.n	8000af8 <main+0x30>
	}

	init_systick_timer(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff ff00 	bl	8000900 <init_systick_timer>

	current_date.day = FRIDAY;
 8000b00:	2306      	movs	r3, #6
 8000b02:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000b04:	230f      	movs	r3, #15
 8000b06:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000b0c:	2315      	movs	r3, #21
 8000b0e:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000b10:	230b      	movs	r3, #11
 8000b12:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000b14:	233b      	movs	r3, #59	; 0x3b
 8000b16:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000b18:	231e      	movs	r3, #30
 8000b1a:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fc8b 	bl	800043e <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc3d 	bl	80003ac <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fcb1 	bl	800049e <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fcf6 	bl	8000530 <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d013      	beq.n	8000b72 <main+0xaa>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <main+0x8c>
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <main+0xe0>)
 8000b52:	e000      	b.n	8000b56 <main+0x8e>
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <main+0xe4>)
 8000b56:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_print_string(time_to_string(&current_time));
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5f 	bl	8000a20 <time_to_string>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fde1 	bl	800072c <lcd_print_string>
		lcd_print_string(am_pm);
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff fdde 	bl	800072c <lcd_print_string>
 8000b70:	e008      	b.n	8000b84 <main+0xbc>
	}else
	{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_print_string(time_to_string(&current_time));
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff52 	bl	8000a20 <time_to_string>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fdd4 	bl	800072c <lcd_print_string>
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000b84:	2101      	movs	r1, #1
 8000b86:	2002      	movs	r0, #2
 8000b88:	f7ff fdee 	bl	8000768 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff70 	bl	8000a74 <date_to_string>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fdc8 	bl	800072c <lcd_print_string>
#endif


	while(1);
 8000b9c:	e7fe      	b.n	8000b9c <main+0xd4>
 8000b9e:	bf00      	nop
 8000ba0:	080025a4 	.word	0x080025a4
 8000ba4:	080025b0 	.word	0x080025b0
 8000ba8:	080025c4 	.word	0x080025c4
 8000bac:	080025c8 	.word	0x080025c8

08000bb0 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc6f 	bl	800049e <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000bc0:	7afb      	ldrb	r3, [r7, #11]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d017      	beq.n	8000bf6 <SysTick_Handler+0x46>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SysTick_Handler+0x20>
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <SysTick_Handler+0xa4>)
 8000bce:	e000      	b.n	8000bd2 <SysTick_Handler+0x22>
 8000bd0:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <SysTick_Handler+0xa8>)
 8000bd2:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_set_cursor(1, 1);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fdc6 	bl	8000768 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff1d 	bl	8000a20 <time_to_string>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fd9f 	bl	800072c <lcd_print_string>
		lcd_print_string(am_pm);
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fd9c 	bl	800072c <lcd_print_string>
 8000bf4:	e00c      	b.n	8000c10 <SysTick_Handler+0x60>
	}else
	{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_set_cursor(1, 1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fdb5 	bl	8000768 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff0c 	bl	8000a20 <time_to_string>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd8e 	bl	800072c <lcd_print_string>
#endif
	}

	ds1307_get_current_date(&current_date);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fc8c 	bl	8000530 <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff fda4 	bl	8000768 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff26 	bl	8000a74 <date_to_string>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fd7e 	bl	800072c <lcd_print_string>
	lcd_print_char('<');
 8000c30:	203c      	movs	r0, #60	; 0x3c
 8000c32:	f7ff fd4f 	bl	80006d4 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe97 	bl	800096c <get_day_of_week>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fd73 	bl	800072c <lcd_print_string>
	lcd_print_char('>');
 8000c46:	203e      	movs	r0, #62	; 0x3e
 8000c48:	f7ff fd44 	bl	80006d4 <lcd_print_char>
#endif


}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	080025c4 	.word	0x080025c4
 8000c58:	080025c8 	.word	0x080025c8

08000c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c60:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8a:	f001 f879 	bl	8001d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff ff1b 	bl	8000ac8 <main>

08000c92 <LoopForever>:

LoopForever:
  b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   r0, =_estack
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ca0:	080025d4 	.word	0x080025d4
  ldr r2, =_sbss
 8000ca4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ca8:	200002c4 	.word	0x200002c4

08000cac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 *********************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d16e      	bne.n	8000da0 <GPIO_PeriClockControl+0xf0>
	{
		if(pGPIOx == GPIOA)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a70      	ldr	r2, [pc, #448]	; (8000e88 <GPIO_PeriClockControl+0x1d8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d105      	bne.n	8000cd6 <GPIO_PeriClockControl+0x26>
		{
			GPIOA_PCLK_EN();
 8000cca:	4b70      	ldr	r3, [pc, #448]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a6f      	ldr	r2, [pc, #444]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOB)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a6d      	ldr	r2, [pc, #436]	; (8000e90 <GPIO_PeriClockControl+0x1e0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d105      	bne.n	8000cea <GPIO_PeriClockControl+0x3a>
		{
			GPIOB_PCLK_EN();
 8000cde:	4b6b      	ldr	r3, [pc, #428]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a6a      	ldr	r2, [pc, #424]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOC)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a69      	ldr	r2, [pc, #420]	; (8000e94 <GPIO_PeriClockControl+0x1e4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d105      	bne.n	8000cfe <GPIO_PeriClockControl+0x4e>
		{
			GPIOC_PCLK_EN();
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a65      	ldr	r2, [pc, #404]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOD)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a65      	ldr	r2, [pc, #404]	; (8000e98 <GPIO_PeriClockControl+0x1e8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d105      	bne.n	8000d12 <GPIO_PeriClockControl+0x62>
		{
			GPIOD_PCLK_EN();
 8000d06:	4b61      	ldr	r3, [pc, #388]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a60      	ldr	r2, [pc, #384]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a61      	ldr	r2, [pc, #388]	; (8000e9c <GPIO_PeriClockControl+0x1ec>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d105      	bne.n	8000d26 <GPIO_PeriClockControl+0x76>
		{
			GPIOE_PCLK_EN();
 8000d1a:	4b5c      	ldr	r3, [pc, #368]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a5b      	ldr	r2, [pc, #364]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOF)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a5d      	ldr	r2, [pc, #372]	; (8000ea0 <GPIO_PeriClockControl+0x1f0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d105      	bne.n	8000d3a <GPIO_PeriClockControl+0x8a>
		{
			GPIOF_PCLK_EN();
 8000d2e:	4b57      	ldr	r3, [pc, #348]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a56      	ldr	r2, [pc, #344]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOG)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a59      	ldr	r2, [pc, #356]	; (8000ea4 <GPIO_PeriClockControl+0x1f4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d105      	bne.n	8000d4e <GPIO_PeriClockControl+0x9e>
		{
			GPIOG_PCLK_EN();
 8000d42:	4b52      	ldr	r3, [pc, #328]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOH)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a55      	ldr	r2, [pc, #340]	; (8000ea8 <GPIO_PeriClockControl+0x1f8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d105      	bne.n	8000d62 <GPIO_PeriClockControl+0xb2>
		{
			GPIOH_PCLK_EN();
 8000d56:	4b4d      	ldr	r3, [pc, #308]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a4c      	ldr	r2, [pc, #304]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOI)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a51      	ldr	r2, [pc, #324]	; (8000eac <GPIO_PeriClockControl+0x1fc>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d105      	bne.n	8000d76 <GPIO_PeriClockControl+0xc6>
		{
			GPIOI_PCLK_EN();
 8000d6a:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a47      	ldr	r2, [pc, #284]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOJ)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	; (8000eb0 <GPIO_PeriClockControl+0x200>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d105      	bne.n	8000d8a <GPIO_PeriClockControl+0xda>
		{
			GPIOJ_PCLK_EN();
 8000d7e:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a42      	ldr	r2, [pc, #264]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
		}

		if(pGPIOx == GPIOK)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <GPIO_PeriClockControl+0x204>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d174      	bne.n	8000e7c <GPIO_PeriClockControl+0x1cc>
		{
			GPIOK_PCLK_EN();
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOK)
		{
			GPIOK_PCLK_DI();
		}
	}
}
 8000d9e:	e06d      	b.n	8000e7c <GPIO_PeriClockControl+0x1cc>
		if(pGPIOx == GPIOA)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a39      	ldr	r2, [pc, #228]	; (8000e88 <GPIO_PeriClockControl+0x1d8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d105      	bne.n	8000db4 <GPIO_PeriClockControl+0x104>
			GPIOA_PCLK_DI();
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a37      	ldr	r2, [pc, #220]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOB)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a36      	ldr	r2, [pc, #216]	; (8000e90 <GPIO_PeriClockControl+0x1e0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d105      	bne.n	8000dc8 <GPIO_PeriClockControl+0x118>
			GPIOB_PCLK_DI();
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a32      	ldr	r2, [pc, #200]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dc2:	f023 0302 	bic.w	r3, r3, #2
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOC)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <GPIO_PeriClockControl+0x1e4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d105      	bne.n	8000ddc <GPIO_PeriClockControl+0x12c>
			GPIOC_PCLK_DI();
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a2d      	ldr	r2, [pc, #180]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dd6:	f023 0304 	bic.w	r3, r3, #4
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOD)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a2e      	ldr	r2, [pc, #184]	; (8000e98 <GPIO_PeriClockControl+0x1e8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d105      	bne.n	8000df0 <GPIO_PeriClockControl+0x140>
			GPIOD_PCLK_DI();
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dea:	f023 0308 	bic.w	r3, r3, #8
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a2a      	ldr	r2, [pc, #168]	; (8000e9c <GPIO_PeriClockControl+0x1ec>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d105      	bne.n	8000e04 <GPIO_PeriClockControl+0x154>
			GPIOE_PCLK_DI();
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000dfe:	f023 0310 	bic.w	r3, r3, #16
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <GPIO_PeriClockControl+0x1f0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d105      	bne.n	8000e18 <GPIO_PeriClockControl+0x168>
			GPIOF_PCLK_DI();
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e12:	f023 0320 	bic.w	r3, r3, #32
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOG)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <GPIO_PeriClockControl+0x1f4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d105      	bne.n	8000e2c <GPIO_PeriClockControl+0x17c>
			GPIOG_PCLK_DI();
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOH)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <GPIO_PeriClockControl+0x1f8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d105      	bne.n	8000e40 <GPIO_PeriClockControl+0x190>
			GPIOH_PCLK_DI();
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOI)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <GPIO_PeriClockControl+0x1fc>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d105      	bne.n	8000e54 <GPIO_PeriClockControl+0x1a4>
			GPIOI_PCLK_DI();
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOJ)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <GPIO_PeriClockControl+0x200>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d105      	bne.n	8000e68 <GPIO_PeriClockControl+0x1b8>
			GPIOJ_PCLK_DI();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
		if(pGPIOx == GPIOK)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <GPIO_PeriClockControl+0x204>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d105      	bne.n	8000e7c <GPIO_PeriClockControl+0x1cc>
			GPIOK_PCLK_DI();
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <GPIO_PeriClockControl+0x1dc>)
 8000e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40022000 	.word	0x40022000
 8000eb0:	40022400 	.word	0x40022400
 8000eb4:	40022800 	.word	0x40022800

08000eb8 <GPIO_Init>:
 *
 * @Note              -  none

 *********************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fef2 	bl	8000cb0 <GPIO_PeriClockControl>

	uint32_t temp = 0; //Temparorary Register
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

	//1. Configure the Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d820      	bhi.n	8000f1a <GPIO_Init+0x62>
	{
		//Non-Interrupt Mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	795b      	ldrb	r3, [r3, #5]
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	791b      	ldrb	r3, [r3, #4]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	400a      	ands	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e0ec      	b.n	80010f4 <GPIO_Init+0x23c>
	}else
	{
		//Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	795b      	ldrb	r3, [r3, #5]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d117      	bne.n	8000f52 <GPIO_Init+0x9a>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f22:	4b4e      	ldr	r3, [pc, #312]	; (800105c <GPIO_Init+0x1a4>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	7912      	ldrb	r2, [r2, #4]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	408a      	lsls	r2, r1
 8000f30:	4611      	mov	r1, r2
 8000f32:	4a4a      	ldr	r2, [pc, #296]	; (800105c <GPIO_Init+0x1a4>)
 8000f34:	430b      	orrs	r3, r1
 8000f36:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <GPIO_Init+0x1a4>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	7912      	ldrb	r2, [r2, #4]
 8000f40:	4611      	mov	r1, r2
 8000f42:	2201      	movs	r2, #1
 8000f44:	408a      	lsls	r2, r1
 8000f46:	43d2      	mvns	r2, r2
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4a44      	ldr	r2, [pc, #272]	; (800105c <GPIO_Init+0x1a4>)
 8000f4c:	400b      	ands	r3, r1
 8000f4e:	6093      	str	r3, [r2, #8]
 8000f50:	e035      	b.n	8000fbe <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	795b      	ldrb	r3, [r3, #5]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d117      	bne.n	8000f8a <GPIO_Init+0xd2>
		{
			//1. Configure the RTSR & Clear FTSR corresponding bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <GPIO_Init+0x1a4>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	7912      	ldrb	r2, [r2, #4]
 8000f62:	4611      	mov	r1, r2
 8000f64:	2201      	movs	r2, #1
 8000f66:	408a      	lsls	r2, r1
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4a3c      	ldr	r2, [pc, #240]	; (800105c <GPIO_Init+0x1a4>)
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f70:	4b3a      	ldr	r3, [pc, #232]	; (800105c <GPIO_Init+0x1a4>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	7912      	ldrb	r2, [r2, #4]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	408a      	lsls	r2, r1
 8000f7e:	43d2      	mvns	r2, r2
 8000f80:	4611      	mov	r1, r2
 8000f82:	4a36      	ldr	r2, [pc, #216]	; (800105c <GPIO_Init+0x1a4>)
 8000f84:	400b      	ands	r3, r1
 8000f86:	60d3      	str	r3, [r2, #12]
 8000f88:	e019      	b.n	8000fbe <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	795b      	ldrb	r3, [r3, #5]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d115      	bne.n	8000fbe <GPIO_Init+0x106>
		{
			//1. Configure both the FTSR & RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <GPIO_Init+0x1a4>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	7912      	ldrb	r2, [r2, #4]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	408a      	lsls	r2, r1
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	; (800105c <GPIO_Init+0x1a4>)
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <GPIO_Init+0x1a4>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	7912      	ldrb	r2, [r2, #4]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	408a      	lsls	r2, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4a28      	ldr	r2, [pc, #160]	; (800105c <GPIO_Init+0x1a4>)
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	6093      	str	r3, [r2, #8]
		}

		//2. Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a22      	ldr	r2, [pc, #136]	; (8001060 <GPIO_Init+0x1a8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d056      	beq.n	8001088 <GPIO_Init+0x1d0>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a21      	ldr	r2, [pc, #132]	; (8001064 <GPIO_Init+0x1ac>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d039      	beq.n	8001058 <GPIO_Init+0x1a0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <GPIO_Init+0x1b0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d032      	beq.n	8001054 <GPIO_Init+0x19c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <GPIO_Init+0x1b4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d02b      	beq.n	8001050 <GPIO_Init+0x198>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <GPIO_Init+0x1b8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d024      	beq.n	800104c <GPIO_Init+0x194>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <GPIO_Init+0x1bc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d01d      	beq.n	8001048 <GPIO_Init+0x190>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <GPIO_Init+0x1c0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d016      	beq.n	8001044 <GPIO_Init+0x18c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <GPIO_Init+0x1c4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00f      	beq.n	8001040 <GPIO_Init+0x188>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a16      	ldr	r2, [pc, #88]	; (8001080 <GPIO_Init+0x1c8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d008      	beq.n	800103c <GPIO_Init+0x184>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <GPIO_Init+0x1cc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <GPIO_Init+0x180>
 8001034:	2309      	movs	r3, #9
 8001036:	e028      	b.n	800108a <GPIO_Init+0x1d2>
 8001038:	2300      	movs	r3, #0
 800103a:	e026      	b.n	800108a <GPIO_Init+0x1d2>
 800103c:	2308      	movs	r3, #8
 800103e:	e024      	b.n	800108a <GPIO_Init+0x1d2>
 8001040:	2307      	movs	r3, #7
 8001042:	e022      	b.n	800108a <GPIO_Init+0x1d2>
 8001044:	2306      	movs	r3, #6
 8001046:	e020      	b.n	800108a <GPIO_Init+0x1d2>
 8001048:	2305      	movs	r3, #5
 800104a:	e01e      	b.n	800108a <GPIO_Init+0x1d2>
 800104c:	2304      	movs	r3, #4
 800104e:	e01c      	b.n	800108a <GPIO_Init+0x1d2>
 8001050:	2303      	movs	r3, #3
 8001052:	e01a      	b.n	800108a <GPIO_Init+0x1d2>
 8001054:	2302      	movs	r3, #2
 8001056:	e018      	b.n	800108a <GPIO_Init+0x1d2>
 8001058:	2301      	movs	r3, #1
 800105a:	e016      	b.n	800108a <GPIO_Init+0x1d2>
 800105c:	40013c00 	.word	0x40013c00
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40021c00 	.word	0x40021c00
 8001080:	40022000 	.word	0x40022000
 8001084:	40022400 	.word	0x40022400
 8001088:	2300      	movs	r3, #0
 800108a:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <GPIO_Init+0x380>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	4a69      	ldr	r2, [pc, #420]	; (8001238 <GPIO_Init+0x380>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 8001098:	4a68      	ldr	r2, [pc, #416]	; (800123c <GPIO_Init+0x384>)
 800109a:	7cfb      	ldrb	r3, [r7, #19]
 800109c:	3302      	adds	r3, #2
 800109e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a2:	7cbb      	ldrb	r3, [r7, #18]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	210f      	movs	r1, #15
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	4962      	ldr	r1, [pc, #392]	; (800123c <GPIO_Init+0x384>)
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	4002      	ands	r2, r0
 80010b6:	3302      	adds	r3, #2
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);
 80010bc:	4a5f      	ldr	r2, [pc, #380]	; (800123c <GPIO_Init+0x384>)
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c6:	7c79      	ldrb	r1, [r7, #17]
 80010c8:	7cbb      	ldrb	r3, [r7, #18]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	495a      	ldr	r1, [pc, #360]	; (800123c <GPIO_Init+0x384>)
 80010d4:	7cfb      	ldrb	r3, [r7, #19]
 80010d6:	4302      	orrs	r2, r0
 80010d8:	3302      	adds	r3, #2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010de:	4b58      	ldr	r3, [pc, #352]	; (8001240 <GPIO_Init+0x388>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	7912      	ldrb	r2, [r2, #4]
 80010e6:	4611      	mov	r1, r2
 80010e8:	2201      	movs	r2, #1
 80010ea:	408a      	lsls	r2, r1
 80010ec:	4611      	mov	r1, r2
 80010ee:	4a54      	ldr	r2, [pc, #336]	; (8001240 <GPIO_Init+0x388>)
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of output of GPIO Pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	799b      	ldrb	r3, [r3, #6]
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	791b      	ldrb	r3, [r3, #4]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2103      	movs	r1, #3
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	400a      	ands	r2, r1
 8001126:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6899      	ldr	r1, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	430a      	orrs	r2, r1
 8001136:	609a      	str	r2, [r3, #8]

	temp = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

	//3. Configure the PUPD Settings of GPIO Pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	79db      	ldrb	r3, [r3, #7]
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	791b      	ldrb	r3, [r3, #4]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2103      	movs	r1, #3
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	400a      	ands	r2, r1
 800116a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]

	temp = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

	//4. Configure the Output type of GPIO Pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7a1b      	ldrb	r3, [r3, #8]
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	791b      	ldrb	r3, [r3, #4]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	4619      	mov	r1, r3
 800119c:	2301      	movs	r3, #1
 800119e:	408b      	lsls	r3, r1
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6859      	ldr	r1, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]

	temp = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

	//5. Configure the Alternate functionality of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d132      	bne.n	800122e <GPIO_Init+0x376>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	08db      	lsrs	r3, r3, #3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1]&= ~(0xF << (4 * (temp2)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	210f      	movs	r1, #15
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4011      	ands	r1, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	3208      	adds	r2, #8
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1]|= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (temp2)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7a5b      	ldrb	r3, [r3, #9]
 8001214:	4619      	mov	r1, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	4619      	mov	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4311      	orrs	r1, r2
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	3208      	adds	r2, #8
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40013c00 	.word	0x40013c00

08001244 <GPIO_WriteToOutputPin>:
 *
 * @Note              -  none

 *********************************************************************************************/
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8001254:	78bb      	ldrb	r3, [r7, #2]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d109      	bne.n	800126e <GPIO_WriteToOutputPin+0x2a>
	{
		//Write 1 to the output data register corresponding to the pin number.
		//REG |= (0 << PinNum); will have no effect on REG. Verify using boolean algebra.
		pGPIOx->ODR |= (1 << PinNumber);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	2101      	movs	r1, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 800126c:	e009      	b.n	8001282 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	43d2      	mvns	r2, r2
 800127c:	401a      	ands	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	615a      	str	r2, [r3, #20]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <I2C_GenerateStartCondition>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

/************************************Helper Functions********************************************************/

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <I2C_GetFlagStatus>:


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4013      	ands	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR |= SlaveAddr;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	611a      	str	r2, [r3, #16]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR |= SlaveAddr;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	//Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01f      	beq.n	8001390 <I2C_ClearADDRFlag+0x56>
	{
		//Master Mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7f1b      	ldrb	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d112      	bne.n	800137e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d11f      	bne.n	80013a0 <I2C_ClearADDRFlag+0x66>
			{
				//Disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE	);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f82e 	bl	80013c8 <I2C_ManageAcking>

				//Clear the ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;

	}
}
 800137c:	e010      	b.n	80013a0 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	60fb      	str	r3, [r7, #12]
}
 800138e:	e007      	b.n	80013a0 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	60fb      	str	r3, [r7, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <I2C_GenerateStopCondition>:



void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d106      	bne.n	80013e8 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80013e6:	e005      	b.n	80013f4 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <I2C_PeripheralControl>:
 *
 * @Note              -  none

 *********************************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d11e      	bne.n	8001450 <I2C_PeripheralControl+0x50>
		{
			if(pI2Cx == I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <I2C_PeripheralControl+0x98>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d105      	bne.n	8001426 <I2C_PeripheralControl+0x26>
			{
				I2C1_PCLK_EN();
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <I2C_PeripheralControl+0x9c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a1f      	ldr	r2, [pc, #124]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
			}

			if(pI2Cx == I2C2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <I2C_PeripheralControl+0xa0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d105      	bne.n	800143a <I2C_PeripheralControl+0x3a>
			{
				I2C2_PCLK_EN();
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
			}

			if(pI2Cx == I2C3)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <I2C_PeripheralControl+0xa4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d124      	bne.n	800148c <I2C_PeripheralControl+0x8c>
			{
				I2C3_PCLK_EN();
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
			{
				I2C3_PCLK_DI();
			}

		}
}
 800144e:	e01d      	b.n	800148c <I2C_PeripheralControl+0x8c>
			if(pI2Cx == I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <I2C_PeripheralControl+0x98>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d105      	bne.n	8001464 <I2C_PeripheralControl+0x64>
				I2C1_PCLK_DI();
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <I2C_PeripheralControl+0x9c>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <I2C_PeripheralControl+0x9c>)
 800145e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
			if(pI2Cx == I2C2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <I2C_PeripheralControl+0xa0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d105      	bne.n	8001478 <I2C_PeripheralControl+0x78>
				I2C2_PCLK_DI();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <I2C_PeripheralControl+0x9c>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001472:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001476:	6413      	str	r3, [r2, #64]	; 0x40
			if(pI2Cx == I2C3)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <I2C_PeripheralControl+0xa4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d105      	bne.n	800148c <I2C_PeripheralControl+0x8c>
				I2C3_PCLK_DI();
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <I2C_PeripheralControl+0x9c>)
 8001486:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40005400 	.word	0x40005400
 800149c:	40023800 	.word	0x40023800
 80014a0:	40005800 	.word	0x40005800
 80014a4:	40005c00 	.word	0x40005c00

080014a8 <I2C_Init>:
 *
 * @Note              -  none

 *********************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//Configure the I2C Peripheral Clock
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ffa2 	bl	8001400 <I2C_PeripheralControl>

	//CR1 - Enable the ACKing
	uint8_t tempreg = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7a5b      	ldrb	r3, [r3, #9]
 80014c4:	029b      	lsls	r3, r3, #10
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	73fb      	strb	r3, [r7, #15]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]


	//CR2 - Configure the FREQ in CR2 value to APB Bus value
	tempreg = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80014e6:	f000 f9a5 	bl	8001834 <RCC_GetPCLK1Value>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a4f      	ldr	r2, [pc, #316]	; (800162c <I2C_Init+0x184>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	73fb      	strb	r3, [r7, #15]
	pI2CHandle->pI2Cx->CR2 |= tempreg & 0x3F;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]

	//OAR1 - Configure the device address
	tempreg = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7a1b      	ldrb	r3, [r3, #8]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	b25a      	sxtb	r2, r3
 800151c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001520:	4313      	orrs	r3, r2
 8001522:	b25b      	sxtb	r3, r3
 8001524:	73fb      	strb	r3, [r7, #15]
	tempreg |= (1 << 14);
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6899      	ldr	r1, [r3, #8]
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]

	//CCR Calculations
	uint16_t ccr_value = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	81bb      	strh	r3, [r7, #12]
	tempreg = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a3b      	ldr	r2, [pc, #236]	; (8001630 <I2C_Init+0x188>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d810      	bhi.n	800156a <I2C_Init+0xc2>
	{
		//Standard Mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001548:	f000 f974 	bl	8001834 <RCC_GetPCLK1Value>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fbb2 f3f3 	udiv	r3, r2, r3
 8001558:	81bb      	strh	r3, [r7, #12]
		tempreg |= (ccr_value & 0xFFF);
 800155a:	89bb      	ldrh	r3, [r7, #12]
 800155c:	b25a      	sxtb	r2, r3
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4313      	orrs	r3, r2
 8001564:	b25b      	sxtb	r3, r3
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e02c      	b.n	80015c4 <I2C_Init+0x11c>

	}else
	{
		//Fast mode
		tempreg |= (1 << 15);
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7a9b      	ldrb	r3, [r3, #10]
 800156e:	039b      	lsls	r3, r3, #14
 8001570:	b25a      	sxtb	r2, r3
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4313      	orrs	r3, r2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	73fb      	strb	r3, [r7, #15]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7a9b      	ldrb	r3, [r3, #10]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <I2C_Init+0xf4>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001584:	f000 f956 	bl	8001834 <RCC_GetPCLK1Value>
 8001588:	4601      	mov	r1, r0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	fbb1 f3f3 	udiv	r3, r1, r3
 8001598:	81bb      	strh	r3, [r7, #12]
 800159a:	e00c      	b.n	80015b6 <I2C_Init+0x10e>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800159c:	f000 f94a 	bl	8001834 <RCC_GetPCLK1Value>
 80015a0:	4601      	mov	r1, r0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	009a      	lsls	r2, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b4:	81bb      	strh	r3, [r7, #12]
		}

		tempreg |= (ccr_value & 0xFFF);
 80015b6:	89bb      	ldrh	r3, [r7, #12]
 80015b8:	b25a      	sxtb	r2, r3
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4313      	orrs	r3, r2
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	73fb      	strb	r3, [r7, #15]
	}

	pI2CHandle->pI2Cx->CCR |= tempreg;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	69d9      	ldr	r1, [r3, #28]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	61da      	str	r2, [r3, #28]

	tempreg = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

	//TRISE Calculation
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <I2C_Init+0x188>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d80a      	bhi.n	80015f8 <I2C_Init+0x150>
	{
		//Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80015e2:	f000 f927 	bl	8001834 <RCC_GetPCLK1Value>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a10      	ldr	r2, [pc, #64]	; (800162c <I2C_Init+0x184>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e00e      	b.n	8001616 <I2C_Init+0x16e>
	}else
	{
		//Fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 80015f8:	f000 f91c 	bl	8001834 <RCC_GetPCLK1Value>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	0a5b      	lsrs	r3, r3, #9
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <I2C_Init+0x18c>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	09db      	lsrs	r3, r3, #7
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001620:	621a      	str	r2, [r3, #32]


}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	431bde83 	.word	0x431bde83
 8001630:	000186a0 	.word	0x000186a0
 8001634:	00044b83 	.word	0x00044b83

08001638 <I2C_MasterSendData>:
 *
 * @Note              -  This is Blocking Call Function or Polling Call Function

 *********************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	70fb      	strb	r3, [r7, #3]
	//1. Generate START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fe1f 	bl	800128e <I2C_GenerateStartCondition>

	//2.Confirm that START generation is completed by checking the SB flag in the SR1
	//(Until SB is cleared SCL will be stretched - LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB) );
 8001650:	bf00      	nop
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe28 	bl	80012ae <I2C_GetFlagStatus>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f6      	beq.n	8001652 <I2C_MasterSendData+0x1a>

	//3. Send the Address of the Slave with R/nW bit set to W (0)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr );
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe32 	bl	80012d6 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that Address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR) );
 8001672:	bf00      	nop
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe17 	bl	80012ae <I2C_GetFlagStatus>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f6      	beq.n	8001674 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//(Until ADDR is cleared SCL will be stretched - LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff fe57 	bl	800133a <I2C_ClearADDRFlag>

	//6. Send data until the length becomes 0.
	while(Len > 0)
 800168c:	e014      	b.n	80016b8 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 800168e:	bf00      	nop
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe09 	bl	80012ae <I2C_GetFlagStatus>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f6      	beq.n	8001690 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
		Len--;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1e7      	bne.n	800168e <I2C_MasterSendData+0x56>
	}

	//7. When length becomes zero wait for TXE = 1 and BTF = 1 before generating stop condition.
		//1. TXE = 1 and BTF = 1 means both SR and DR are empty and next transmission should begin.
		//2. When BTF = 1 , SCL will be Stretched.
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 80016be:	bf00      	nop
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fdf1 	bl	80012ae <I2C_GetFlagStatus>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f6      	beq.n	80016c0 <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 80016d2:	bf00      	nop
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2104      	movs	r1, #4
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fde7 	bl	80012ae <I2C_GetFlagStatus>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f6      	beq.n	80016d4 <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//(Generating STOP, automatically clears BTF)
	if(Sr == I2C_DISABLE_SR)
 80016e6:	7e3b      	ldrb	r3, [r7, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d104      	bne.n	80016f6 <I2C_MasterSendData+0xbe>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe59 	bl	80013a8 <I2C_GenerateStopCondition>
	}

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <I2C_MasterReceiveData>:
 *
 * @Note              -  This is Blocking Call Function or Polling Call Function

 *********************************************************************************************/
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	4611      	mov	r1, r2
 800170c:	461a      	mov	r2, r3
 800170e:	460b      	mov	r3, r1
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	4613      	mov	r3, r2
 8001714:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fdb7 	bl	800128e <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB) );
 8001720:	bf00      	nop
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fdc0 	bl	80012ae <I2C_GetFlagStatus>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f6      	beq.n	8001722 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr );
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	79ba      	ldrb	r2, [r7, #6]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fde3 	bl	8001308 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR) );
 8001742:	bf00      	nop
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2102      	movs	r1, #2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fdaf 	bl	80012ae <I2C_GetFlagStatus>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f6      	beq.n	8001744 <I2C_MasterReceiveData+0x44>

	//procedure to read only 1 byte from slave
	if(Len == 1)
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d121      	bne.n	80017a0 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE	);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe30 	bl	80013c8 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fde6 	bl	800133a <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 800176e:	bf00      	nop
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2140      	movs	r1, #64	; 0x40
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fd99 	bl	80012ae <I2C_GetFlagStatus>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f6      	beq.n	8001770 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR)
 8001782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d104      	bne.n	8001794 <I2C_MasterReceiveData+0x94>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fe0a 	bl	80013a8 <I2C_GenerateStopCondition>
		}

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	701a      	strb	r2, [r3, #0]
	}

    //procedure to read data from slave when Len > 1
	if(Len > 1)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d930      	bls.n	8001808 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f7ff fdc7 	bl	800133a <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e027      	b.n	8001802 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 80017b2:	bf00      	nop
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2140      	movs	r1, #64	; 0x40
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fd77 	bl	80012ae <I2C_GetFlagStatus>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f6      	beq.n	80017b4 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d10e      	bne.n	80017ea <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE	);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fdf8 	bl	80013c8 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR)
 80017d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <I2C_MasterReceiveData+0xea>
				{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fddf 	bl	80013a8 <I2C_GenerateStopCondition>
				}

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3301      	adds	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3b01      	subs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1d4      	bne.n	80017b2 <I2C_MasterReceiveData+0xb2>
		}
	}
	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	7a5b      	ldrb	r3, [r3, #9]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d10b      	bne.n	8001828 <I2C_MasterReceiveData+0x128>
	{
		//Enabling PE
		I2C1 -> CR1 |= ( 1 << I2C_CR1_PE);
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <I2C_MasterReceiveData+0x130>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <I2C_MasterReceiveData+0x130>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6013      	str	r3, [r2, #0]

		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE );
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fdd0 	bl	80013c8 <I2C_ManageAcking>
	}
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40005400 	.word	0x40005400

08001834 <RCC_GetPCLK1Value>:
uint16_t AHB_Prescalar[8] = {2,4,8,16,64,128,256,512};

uint16_t APB1_Prescalar[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,apb1p;
	uint16_t ahbp;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <RCC_GetPCLK1Value+0xa0>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	71fb      	strb	r3, [r7, #7]

	if(clksrc == 0)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <RCC_GetPCLK1Value+0xa4>)
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e00b      	b.n	800186c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <RCC_GetPCLK1Value+0xa8>)
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e005      	b.n	800186c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d102      	bne.n	800186c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8001866:	f000 f83f 	bl	80018e8 <RCC_GetPLLOutputClock>
 800186a:	60f8      	str	r0, [r7, #12]
	}

	//AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <RCC_GetPCLK1Value+0xa0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	71bb      	strb	r3, [r7, #6]

	if(temp < 8)
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	2b07      	cmp	r3, #7
 800187e:	d802      	bhi.n	8001886 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	813b      	strh	r3, [r7, #8]
 8001884:	e005      	b.n	8001892 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_Prescalar[temp-8];
 8001886:	79bb      	ldrb	r3, [r7, #6]
 8001888:	3b08      	subs	r3, #8
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <RCC_GetPCLK1Value+0xac>)
 800188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001890:	813b      	strh	r3, [r7, #8]
	}

	//APB
	temp = ((RCC->CFGR >> 10) & 0x7);
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <RCC_GetPCLK1Value+0xa0>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	0a9b      	lsrs	r3, r3, #10
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	71bb      	strb	r3, [r7, #6]

	if(temp < 4)
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d802      	bhi.n	80018ac <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	72fb      	strb	r3, [r7, #11]
 80018aa:	e005      	b.n	80018b8 <RCC_GetPCLK1Value+0x84>
	}else
	{
		apb1p = APB1_Prescalar[temp-4];
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	3b04      	subs	r3, #4
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <RCC_GetPCLK1Value+0xb0>)
 80018b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b6:	72fb      	strb	r3, [r7, #11]
	}

	pclk1 = (SystemClk/ahbp)/apb1p;
 80018b8:	893b      	ldrh	r3, [r7, #8]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	603b      	str	r3, [r7, #0]

	return pclk1;
 80018c8:	683b      	ldr	r3, [r7, #0]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	00f42400 	.word	0x00f42400
 80018dc:	007a1200 	.word	0x007a1200
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000010 	.word	0x20000010

080018e8 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

	return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <std>:
 80018f8:	2300      	movs	r3, #0
 80018fa:	b510      	push	{r4, lr}
 80018fc:	4604      	mov	r4, r0
 80018fe:	e9c0 3300 	strd	r3, r3, [r0]
 8001902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001906:	6083      	str	r3, [r0, #8]
 8001908:	8181      	strh	r1, [r0, #12]
 800190a:	6643      	str	r3, [r0, #100]	; 0x64
 800190c:	81c2      	strh	r2, [r0, #14]
 800190e:	6183      	str	r3, [r0, #24]
 8001910:	4619      	mov	r1, r3
 8001912:	2208      	movs	r2, #8
 8001914:	305c      	adds	r0, #92	; 0x5c
 8001916:	f000 f9e5 	bl	8001ce4 <memset>
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <std+0x58>)
 800191c:	6263      	str	r3, [r4, #36]	; 0x24
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <std+0x5c>)
 8001920:	62a3      	str	r3, [r4, #40]	; 0x28
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <std+0x60>)
 8001924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <std+0x64>)
 8001928:	6323      	str	r3, [r4, #48]	; 0x30
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <std+0x68>)
 800192c:	6224      	str	r4, [r4, #32]
 800192e:	429c      	cmp	r4, r3
 8001930:	d006      	beq.n	8001940 <std+0x48>
 8001932:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001936:	4294      	cmp	r4, r2
 8001938:	d002      	beq.n	8001940 <std+0x48>
 800193a:	33d0      	adds	r3, #208	; 0xd0
 800193c:	429c      	cmp	r4, r3
 800193e:	d105      	bne.n	800194c <std+0x54>
 8001940:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001948:	f000 ba3e 	b.w	8001dc8 <__retarget_lock_init_recursive>
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop
 8001950:	08001b35 	.word	0x08001b35
 8001954:	08001b57 	.word	0x08001b57
 8001958:	08001b8f 	.word	0x08001b8f
 800195c:	08001bb3 	.word	0x08001bb3
 8001960:	200000d4 	.word	0x200000d4

08001964 <stdio_exit_handler>:
 8001964:	4a02      	ldr	r2, [pc, #8]	; (8001970 <stdio_exit_handler+0xc>)
 8001966:	4903      	ldr	r1, [pc, #12]	; (8001974 <stdio_exit_handler+0x10>)
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <stdio_exit_handler+0x14>)
 800196a:	f000 b869 	b.w	8001a40 <_fwalk_sglue>
 800196e:	bf00      	nop
 8001970:	20000018 	.word	0x20000018
 8001974:	080020cd 	.word	0x080020cd
 8001978:	20000024 	.word	0x20000024

0800197c <cleanup_stdio>:
 800197c:	6841      	ldr	r1, [r0, #4]
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <cleanup_stdio+0x34>)
 8001980:	4299      	cmp	r1, r3
 8001982:	b510      	push	{r4, lr}
 8001984:	4604      	mov	r4, r0
 8001986:	d001      	beq.n	800198c <cleanup_stdio+0x10>
 8001988:	f000 fba0 	bl	80020cc <_fflush_r>
 800198c:	68a1      	ldr	r1, [r4, #8]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <cleanup_stdio+0x38>)
 8001990:	4299      	cmp	r1, r3
 8001992:	d002      	beq.n	800199a <cleanup_stdio+0x1e>
 8001994:	4620      	mov	r0, r4
 8001996:	f000 fb99 	bl	80020cc <_fflush_r>
 800199a:	68e1      	ldr	r1, [r4, #12]
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <cleanup_stdio+0x3c>)
 800199e:	4299      	cmp	r1, r3
 80019a0:	d004      	beq.n	80019ac <cleanup_stdio+0x30>
 80019a2:	4620      	mov	r0, r4
 80019a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019a8:	f000 bb90 	b.w	80020cc <_fflush_r>
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	bf00      	nop
 80019b0:	200000d4 	.word	0x200000d4
 80019b4:	2000013c 	.word	0x2000013c
 80019b8:	200001a4 	.word	0x200001a4

080019bc <global_stdio_init.part.0>:
 80019bc:	b510      	push	{r4, lr}
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <global_stdio_init.part.0+0x30>)
 80019c0:	4c0b      	ldr	r4, [pc, #44]	; (80019f0 <global_stdio_init.part.0+0x34>)
 80019c2:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <global_stdio_init.part.0+0x38>)
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	4620      	mov	r0, r4
 80019c8:	2200      	movs	r2, #0
 80019ca:	2104      	movs	r1, #4
 80019cc:	f7ff ff94 	bl	80018f8 <std>
 80019d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80019d4:	2201      	movs	r2, #1
 80019d6:	2109      	movs	r1, #9
 80019d8:	f7ff ff8e 	bl	80018f8 <std>
 80019dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80019e0:	2202      	movs	r2, #2
 80019e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019e6:	2112      	movs	r1, #18
 80019e8:	f7ff bf86 	b.w	80018f8 <std>
 80019ec:	2000020c 	.word	0x2000020c
 80019f0:	200000d4 	.word	0x200000d4
 80019f4:	08001965 	.word	0x08001965

080019f8 <__sfp_lock_acquire>:
 80019f8:	4801      	ldr	r0, [pc, #4]	; (8001a00 <__sfp_lock_acquire+0x8>)
 80019fa:	f000 b9e6 	b.w	8001dca <__retarget_lock_acquire_recursive>
 80019fe:	bf00      	nop
 8001a00:	20000215 	.word	0x20000215

08001a04 <__sfp_lock_release>:
 8001a04:	4801      	ldr	r0, [pc, #4]	; (8001a0c <__sfp_lock_release+0x8>)
 8001a06:	f000 b9e1 	b.w	8001dcc <__retarget_lock_release_recursive>
 8001a0a:	bf00      	nop
 8001a0c:	20000215 	.word	0x20000215

08001a10 <__sinit>:
 8001a10:	b510      	push	{r4, lr}
 8001a12:	4604      	mov	r4, r0
 8001a14:	f7ff fff0 	bl	80019f8 <__sfp_lock_acquire>
 8001a18:	6a23      	ldr	r3, [r4, #32]
 8001a1a:	b11b      	cbz	r3, 8001a24 <__sinit+0x14>
 8001a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a20:	f7ff bff0 	b.w	8001a04 <__sfp_lock_release>
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__sinit+0x28>)
 8001a26:	6223      	str	r3, [r4, #32]
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <__sinit+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f5      	bne.n	8001a1c <__sinit+0xc>
 8001a30:	f7ff ffc4 	bl	80019bc <global_stdio_init.part.0>
 8001a34:	e7f2      	b.n	8001a1c <__sinit+0xc>
 8001a36:	bf00      	nop
 8001a38:	0800197d 	.word	0x0800197d
 8001a3c:	2000020c 	.word	0x2000020c

08001a40 <_fwalk_sglue>:
 8001a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a44:	4607      	mov	r7, r0
 8001a46:	4688      	mov	r8, r1
 8001a48:	4614      	mov	r4, r2
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a50:	f1b9 0901 	subs.w	r9, r9, #1
 8001a54:	d505      	bpl.n	8001a62 <_fwalk_sglue+0x22>
 8001a56:	6824      	ldr	r4, [r4, #0]
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d1f7      	bne.n	8001a4c <_fwalk_sglue+0xc>
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a62:	89ab      	ldrh	r3, [r5, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d907      	bls.n	8001a78 <_fwalk_sglue+0x38>
 8001a68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	d003      	beq.n	8001a78 <_fwalk_sglue+0x38>
 8001a70:	4629      	mov	r1, r5
 8001a72:	4638      	mov	r0, r7
 8001a74:	47c0      	blx	r8
 8001a76:	4306      	orrs	r6, r0
 8001a78:	3568      	adds	r5, #104	; 0x68
 8001a7a:	e7e9      	b.n	8001a50 <_fwalk_sglue+0x10>

08001a7c <_puts_r>:
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	b570      	push	{r4, r5, r6, lr}
 8001a80:	6884      	ldr	r4, [r0, #8]
 8001a82:	4605      	mov	r5, r0
 8001a84:	460e      	mov	r6, r1
 8001a86:	b90b      	cbnz	r3, 8001a8c <_puts_r+0x10>
 8001a88:	f7ff ffc2 	bl	8001a10 <__sinit>
 8001a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a8e:	07db      	lsls	r3, r3, #31
 8001a90:	d405      	bmi.n	8001a9e <_puts_r+0x22>
 8001a92:	89a3      	ldrh	r3, [r4, #12]
 8001a94:	0598      	lsls	r0, r3, #22
 8001a96:	d402      	bmi.n	8001a9e <_puts_r+0x22>
 8001a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a9a:	f000 f996 	bl	8001dca <__retarget_lock_acquire_recursive>
 8001a9e:	89a3      	ldrh	r3, [r4, #12]
 8001aa0:	0719      	lsls	r1, r3, #28
 8001aa2:	d513      	bpl.n	8001acc <_puts_r+0x50>
 8001aa4:	6923      	ldr	r3, [r4, #16]
 8001aa6:	b18b      	cbz	r3, 8001acc <_puts_r+0x50>
 8001aa8:	3e01      	subs	r6, #1
 8001aaa:	68a3      	ldr	r3, [r4, #8]
 8001aac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60a3      	str	r3, [r4, #8]
 8001ab4:	b9e9      	cbnz	r1, 8001af2 <_puts_r+0x76>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da2e      	bge.n	8001b18 <_puts_r+0x9c>
 8001aba:	4622      	mov	r2, r4
 8001abc:	210a      	movs	r1, #10
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f000 f87b 	bl	8001bba <__swbuf_r>
 8001ac4:	3001      	adds	r0, #1
 8001ac6:	d007      	beq.n	8001ad8 <_puts_r+0x5c>
 8001ac8:	250a      	movs	r5, #10
 8001aca:	e007      	b.n	8001adc <_puts_r+0x60>
 8001acc:	4621      	mov	r1, r4
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f000 f8b0 	bl	8001c34 <__swsetup_r>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d0e7      	beq.n	8001aa8 <_puts_r+0x2c>
 8001ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8001adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ade:	07da      	lsls	r2, r3, #31
 8001ae0:	d405      	bmi.n	8001aee <_puts_r+0x72>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	059b      	lsls	r3, r3, #22
 8001ae6:	d402      	bmi.n	8001aee <_puts_r+0x72>
 8001ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aea:	f000 f96f 	bl	8001dcc <__retarget_lock_release_recursive>
 8001aee:	4628      	mov	r0, r5
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da04      	bge.n	8001b00 <_puts_r+0x84>
 8001af6:	69a2      	ldr	r2, [r4, #24]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dc06      	bgt.n	8001b0a <_puts_r+0x8e>
 8001afc:	290a      	cmp	r1, #10
 8001afe:	d004      	beq.n	8001b0a <_puts_r+0x8e>
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	6022      	str	r2, [r4, #0]
 8001b06:	7019      	strb	r1, [r3, #0]
 8001b08:	e7cf      	b.n	8001aaa <_puts_r+0x2e>
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f000 f854 	bl	8001bba <__swbuf_r>
 8001b12:	3001      	adds	r0, #1
 8001b14:	d1c9      	bne.n	8001aaa <_puts_r+0x2e>
 8001b16:	e7df      	b.n	8001ad8 <_puts_r+0x5c>
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	250a      	movs	r5, #10
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	6022      	str	r2, [r4, #0]
 8001b20:	701d      	strb	r5, [r3, #0]
 8001b22:	e7db      	b.n	8001adc <_puts_r+0x60>

08001b24 <puts>:
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <puts+0xc>)
 8001b26:	4601      	mov	r1, r0
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	f7ff bfa7 	b.w	8001a7c <_puts_r>
 8001b2e:	bf00      	nop
 8001b30:	20000070 	.word	0x20000070

08001b34 <__sread>:
 8001b34:	b510      	push	{r4, lr}
 8001b36:	460c      	mov	r4, r1
 8001b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b3c:	f000 f8fc 	bl	8001d38 <_read_r>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	bfab      	itete	ge
 8001b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b46:	89a3      	ldrhlt	r3, [r4, #12]
 8001b48:	181b      	addge	r3, r3, r0
 8001b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b4e:	bfac      	ite	ge
 8001b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b52:	81a3      	strhlt	r3, [r4, #12]
 8001b54:	bd10      	pop	{r4, pc}

08001b56 <__swrite>:
 8001b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5a:	461f      	mov	r7, r3
 8001b5c:	898b      	ldrh	r3, [r1, #12]
 8001b5e:	05db      	lsls	r3, r3, #23
 8001b60:	4605      	mov	r5, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	4616      	mov	r6, r2
 8001b66:	d505      	bpl.n	8001b74 <__swrite+0x1e>
 8001b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f000 f8d0 	bl	8001d14 <_lseek_r>
 8001b74:	89a3      	ldrh	r3, [r4, #12]
 8001b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b7e:	81a3      	strh	r3, [r4, #12]
 8001b80:	4632      	mov	r2, r6
 8001b82:	463b      	mov	r3, r7
 8001b84:	4628      	mov	r0, r5
 8001b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b8a:	f000 b8e7 	b.w	8001d5c <_write_r>

08001b8e <__sseek>:
 8001b8e:	b510      	push	{r4, lr}
 8001b90:	460c      	mov	r4, r1
 8001b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b96:	f000 f8bd 	bl	8001d14 <_lseek_r>
 8001b9a:	1c43      	adds	r3, r0, #1
 8001b9c:	89a3      	ldrh	r3, [r4, #12]
 8001b9e:	bf15      	itete	ne
 8001ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001baa:	81a3      	strheq	r3, [r4, #12]
 8001bac:	bf18      	it	ne
 8001bae:	81a3      	strhne	r3, [r4, #12]
 8001bb0:	bd10      	pop	{r4, pc}

08001bb2 <__sclose>:
 8001bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bb6:	f000 b89d 	b.w	8001cf4 <_close_r>

08001bba <__swbuf_r>:
 8001bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbc:	460e      	mov	r6, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	b118      	cbz	r0, 8001bcc <__swbuf_r+0x12>
 8001bc4:	6a03      	ldr	r3, [r0, #32]
 8001bc6:	b90b      	cbnz	r3, 8001bcc <__swbuf_r+0x12>
 8001bc8:	f7ff ff22 	bl	8001a10 <__sinit>
 8001bcc:	69a3      	ldr	r3, [r4, #24]
 8001bce:	60a3      	str	r3, [r4, #8]
 8001bd0:	89a3      	ldrh	r3, [r4, #12]
 8001bd2:	071a      	lsls	r2, r3, #28
 8001bd4:	d525      	bpl.n	8001c22 <__swbuf_r+0x68>
 8001bd6:	6923      	ldr	r3, [r4, #16]
 8001bd8:	b31b      	cbz	r3, 8001c22 <__swbuf_r+0x68>
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	6922      	ldr	r2, [r4, #16]
 8001bde:	1a98      	subs	r0, r3, r2
 8001be0:	6963      	ldr	r3, [r4, #20]
 8001be2:	b2f6      	uxtb	r6, r6
 8001be4:	4283      	cmp	r3, r0
 8001be6:	4637      	mov	r7, r6
 8001be8:	dc04      	bgt.n	8001bf4 <__swbuf_r+0x3a>
 8001bea:	4621      	mov	r1, r4
 8001bec:	4628      	mov	r0, r5
 8001bee:	f000 fa6d 	bl	80020cc <_fflush_r>
 8001bf2:	b9e0      	cbnz	r0, 8001c2e <__swbuf_r+0x74>
 8001bf4:	68a3      	ldr	r3, [r4, #8]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	60a3      	str	r3, [r4, #8]
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	6022      	str	r2, [r4, #0]
 8001c00:	701e      	strb	r6, [r3, #0]
 8001c02:	6962      	ldr	r2, [r4, #20]
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d004      	beq.n	8001c14 <__swbuf_r+0x5a>
 8001c0a:	89a3      	ldrh	r3, [r4, #12]
 8001c0c:	07db      	lsls	r3, r3, #31
 8001c0e:	d506      	bpl.n	8001c1e <__swbuf_r+0x64>
 8001c10:	2e0a      	cmp	r6, #10
 8001c12:	d104      	bne.n	8001c1e <__swbuf_r+0x64>
 8001c14:	4621      	mov	r1, r4
 8001c16:	4628      	mov	r0, r5
 8001c18:	f000 fa58 	bl	80020cc <_fflush_r>
 8001c1c:	b938      	cbnz	r0, 8001c2e <__swbuf_r+0x74>
 8001c1e:	4638      	mov	r0, r7
 8001c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c22:	4621      	mov	r1, r4
 8001c24:	4628      	mov	r0, r5
 8001c26:	f000 f805 	bl	8001c34 <__swsetup_r>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d0d5      	beq.n	8001bda <__swbuf_r+0x20>
 8001c2e:	f04f 37ff 	mov.w	r7, #4294967295
 8001c32:	e7f4      	b.n	8001c1e <__swbuf_r+0x64>

08001c34 <__swsetup_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <__swsetup_r+0xac>)
 8001c38:	4605      	mov	r5, r0
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	b118      	cbz	r0, 8001c48 <__swsetup_r+0x14>
 8001c40:	6a03      	ldr	r3, [r0, #32]
 8001c42:	b90b      	cbnz	r3, 8001c48 <__swsetup_r+0x14>
 8001c44:	f7ff fee4 	bl	8001a10 <__sinit>
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c4e:	0718      	lsls	r0, r3, #28
 8001c50:	d422      	bmi.n	8001c98 <__swsetup_r+0x64>
 8001c52:	06d9      	lsls	r1, r3, #27
 8001c54:	d407      	bmi.n	8001c66 <__swsetup_r+0x32>
 8001c56:	2309      	movs	r3, #9
 8001c58:	602b      	str	r3, [r5, #0]
 8001c5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c5e:	81a3      	strh	r3, [r4, #12]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	e034      	b.n	8001cd0 <__swsetup_r+0x9c>
 8001c66:	0758      	lsls	r0, r3, #29
 8001c68:	d512      	bpl.n	8001c90 <__swsetup_r+0x5c>
 8001c6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c6c:	b141      	cbz	r1, 8001c80 <__swsetup_r+0x4c>
 8001c6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c72:	4299      	cmp	r1, r3
 8001c74:	d002      	beq.n	8001c7c <__swsetup_r+0x48>
 8001c76:	4628      	mov	r0, r5
 8001c78:	f000 f8aa 	bl	8001dd0 <_free_r>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	6363      	str	r3, [r4, #52]	; 0x34
 8001c80:	89a3      	ldrh	r3, [r4, #12]
 8001c82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c86:	81a3      	strh	r3, [r4, #12]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	6063      	str	r3, [r4, #4]
 8001c8c:	6923      	ldr	r3, [r4, #16]
 8001c8e:	6023      	str	r3, [r4, #0]
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	81a3      	strh	r3, [r4, #12]
 8001c98:	6923      	ldr	r3, [r4, #16]
 8001c9a:	b94b      	cbnz	r3, 8001cb0 <__swsetup_r+0x7c>
 8001c9c:	89a3      	ldrh	r3, [r4, #12]
 8001c9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca6:	d003      	beq.n	8001cb0 <__swsetup_r+0x7c>
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4628      	mov	r0, r5
 8001cac:	f000 fa5c 	bl	8002168 <__smakebuf_r>
 8001cb0:	89a0      	ldrh	r0, [r4, #12]
 8001cb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cb6:	f010 0301 	ands.w	r3, r0, #1
 8001cba:	d00a      	beq.n	8001cd2 <__swsetup_r+0x9e>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60a3      	str	r3, [r4, #8]
 8001cc0:	6963      	ldr	r3, [r4, #20]
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	61a3      	str	r3, [r4, #24]
 8001cc6:	6923      	ldr	r3, [r4, #16]
 8001cc8:	b943      	cbnz	r3, 8001cdc <__swsetup_r+0xa8>
 8001cca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cce:	d1c4      	bne.n	8001c5a <__swsetup_r+0x26>
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
 8001cd2:	0781      	lsls	r1, r0, #30
 8001cd4:	bf58      	it	pl
 8001cd6:	6963      	ldrpl	r3, [r4, #20]
 8001cd8:	60a3      	str	r3, [r4, #8]
 8001cda:	e7f4      	b.n	8001cc6 <__swsetup_r+0x92>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e7f7      	b.n	8001cd0 <__swsetup_r+0x9c>
 8001ce0:	20000070 	.word	0x20000070

08001ce4 <memset>:
 8001ce4:	4402      	add	r2, r0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d100      	bne.n	8001cee <memset+0xa>
 8001cec:	4770      	bx	lr
 8001cee:	f803 1b01 	strb.w	r1, [r3], #1
 8001cf2:	e7f9      	b.n	8001ce8 <memset+0x4>

08001cf4 <_close_r>:
 8001cf4:	b538      	push	{r3, r4, r5, lr}
 8001cf6:	4d06      	ldr	r5, [pc, #24]	; (8001d10 <_close_r+0x1c>)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	602b      	str	r3, [r5, #0]
 8001d00:	f000 fb78 	bl	80023f4 <_close>
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	d102      	bne.n	8001d0e <_close_r+0x1a>
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	b103      	cbz	r3, 8001d0e <_close_r+0x1a>
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
 8001d10:	20000210 	.word	0x20000210

08001d14 <_lseek_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4d07      	ldr	r5, [pc, #28]	; (8001d34 <_lseek_r+0x20>)
 8001d18:	4604      	mov	r4, r0
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	2200      	movs	r2, #0
 8001d20:	602a      	str	r2, [r5, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f000 fb23 	bl	800236e <_lseek>
 8001d28:	1c43      	adds	r3, r0, #1
 8001d2a:	d102      	bne.n	8001d32 <_lseek_r+0x1e>
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	b103      	cbz	r3, 8001d32 <_lseek_r+0x1e>
 8001d30:	6023      	str	r3, [r4, #0]
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	20000210 	.word	0x20000210

08001d38 <_read_r>:
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	4d07      	ldr	r5, [pc, #28]	; (8001d58 <_read_r+0x20>)
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	4608      	mov	r0, r1
 8001d40:	4611      	mov	r1, r2
 8001d42:	2200      	movs	r2, #0
 8001d44:	602a      	str	r2, [r5, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f000 fab9 	bl	80022be <_read>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	d102      	bne.n	8001d56 <_read_r+0x1e>
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	b103      	cbz	r3, 8001d56 <_read_r+0x1e>
 8001d54:	6023      	str	r3, [r4, #0]
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
 8001d58:	20000210 	.word	0x20000210

08001d5c <_write_r>:
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	4d07      	ldr	r5, [pc, #28]	; (8001d7c <_write_r+0x20>)
 8001d60:	4604      	mov	r4, r0
 8001d62:	4608      	mov	r0, r1
 8001d64:	4611      	mov	r1, r2
 8001d66:	2200      	movs	r2, #0
 8001d68:	602a      	str	r2, [r5, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f000 fb11 	bl	8002392 <_write>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d102      	bne.n	8001d7a <_write_r+0x1e>
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	b103      	cbz	r3, 8001d7a <_write_r+0x1e>
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	bd38      	pop	{r3, r4, r5, pc}
 8001d7c:	20000210 	.word	0x20000210

08001d80 <__libc_init_array>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	4d0d      	ldr	r5, [pc, #52]	; (8001db8 <__libc_init_array+0x38>)
 8001d84:	4c0d      	ldr	r4, [pc, #52]	; (8001dbc <__libc_init_array+0x3c>)
 8001d86:	1b64      	subs	r4, r4, r5
 8001d88:	10a4      	asrs	r4, r4, #2
 8001d8a:	2600      	movs	r6, #0
 8001d8c:	42a6      	cmp	r6, r4
 8001d8e:	d109      	bne.n	8001da4 <__libc_init_array+0x24>
 8001d90:	4d0b      	ldr	r5, [pc, #44]	; (8001dc0 <__libc_init_array+0x40>)
 8001d92:	4c0c      	ldr	r4, [pc, #48]	; (8001dc4 <__libc_init_array+0x44>)
 8001d94:	f000 fbca 	bl	800252c <_init>
 8001d98:	1b64      	subs	r4, r4, r5
 8001d9a:	10a4      	asrs	r4, r4, #2
 8001d9c:	2600      	movs	r6, #0
 8001d9e:	42a6      	cmp	r6, r4
 8001da0:	d105      	bne.n	8001dae <__libc_init_array+0x2e>
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
 8001da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da8:	4798      	blx	r3
 8001daa:	3601      	adds	r6, #1
 8001dac:	e7ee      	b.n	8001d8c <__libc_init_array+0xc>
 8001dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db2:	4798      	blx	r3
 8001db4:	3601      	adds	r6, #1
 8001db6:	e7f2      	b.n	8001d9e <__libc_init_array+0x1e>
 8001db8:	080025cc 	.word	0x080025cc
 8001dbc:	080025cc 	.word	0x080025cc
 8001dc0:	080025cc 	.word	0x080025cc
 8001dc4:	080025d0 	.word	0x080025d0

08001dc8 <__retarget_lock_init_recursive>:
 8001dc8:	4770      	bx	lr

08001dca <__retarget_lock_acquire_recursive>:
 8001dca:	4770      	bx	lr

08001dcc <__retarget_lock_release_recursive>:
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_free_r>:
 8001dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dd2:	2900      	cmp	r1, #0
 8001dd4:	d044      	beq.n	8001e60 <_free_r+0x90>
 8001dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dda:	9001      	str	r0, [sp, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f1a1 0404 	sub.w	r4, r1, #4
 8001de2:	bfb8      	it	lt
 8001de4:	18e4      	addlt	r4, r4, r3
 8001de6:	f000 f8df 	bl	8001fa8 <__malloc_lock>
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <_free_r+0x94>)
 8001dec:	9801      	ldr	r0, [sp, #4]
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	b933      	cbnz	r3, 8001e00 <_free_r+0x30>
 8001df2:	6063      	str	r3, [r4, #4]
 8001df4:	6014      	str	r4, [r2, #0]
 8001df6:	b003      	add	sp, #12
 8001df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001dfc:	f000 b8da 	b.w	8001fb4 <__malloc_unlock>
 8001e00:	42a3      	cmp	r3, r4
 8001e02:	d908      	bls.n	8001e16 <_free_r+0x46>
 8001e04:	6825      	ldr	r5, [r4, #0]
 8001e06:	1961      	adds	r1, r4, r5
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	bf01      	itttt	eq
 8001e0c:	6819      	ldreq	r1, [r3, #0]
 8001e0e:	685b      	ldreq	r3, [r3, #4]
 8001e10:	1949      	addeq	r1, r1, r5
 8001e12:	6021      	streq	r1, [r4, #0]
 8001e14:	e7ed      	b.n	8001df2 <_free_r+0x22>
 8001e16:	461a      	mov	r2, r3
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	b10b      	cbz	r3, 8001e20 <_free_r+0x50>
 8001e1c:	42a3      	cmp	r3, r4
 8001e1e:	d9fa      	bls.n	8001e16 <_free_r+0x46>
 8001e20:	6811      	ldr	r1, [r2, #0]
 8001e22:	1855      	adds	r5, r2, r1
 8001e24:	42a5      	cmp	r5, r4
 8001e26:	d10b      	bne.n	8001e40 <_free_r+0x70>
 8001e28:	6824      	ldr	r4, [r4, #0]
 8001e2a:	4421      	add	r1, r4
 8001e2c:	1854      	adds	r4, r2, r1
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	6011      	str	r1, [r2, #0]
 8001e32:	d1e0      	bne.n	8001df6 <_free_r+0x26>
 8001e34:	681c      	ldr	r4, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	6053      	str	r3, [r2, #4]
 8001e3a:	440c      	add	r4, r1
 8001e3c:	6014      	str	r4, [r2, #0]
 8001e3e:	e7da      	b.n	8001df6 <_free_r+0x26>
 8001e40:	d902      	bls.n	8001e48 <_free_r+0x78>
 8001e42:	230c      	movs	r3, #12
 8001e44:	6003      	str	r3, [r0, #0]
 8001e46:	e7d6      	b.n	8001df6 <_free_r+0x26>
 8001e48:	6825      	ldr	r5, [r4, #0]
 8001e4a:	1961      	adds	r1, r4, r5
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	bf04      	itt	eq
 8001e50:	6819      	ldreq	r1, [r3, #0]
 8001e52:	685b      	ldreq	r3, [r3, #4]
 8001e54:	6063      	str	r3, [r4, #4]
 8001e56:	bf04      	itt	eq
 8001e58:	1949      	addeq	r1, r1, r5
 8001e5a:	6021      	streq	r1, [r4, #0]
 8001e5c:	6054      	str	r4, [r2, #4]
 8001e5e:	e7ca      	b.n	8001df6 <_free_r+0x26>
 8001e60:	b003      	add	sp, #12
 8001e62:	bd30      	pop	{r4, r5, pc}
 8001e64:	20000218 	.word	0x20000218

08001e68 <sbrk_aligned>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	4e0e      	ldr	r6, [pc, #56]	; (8001ea4 <sbrk_aligned+0x3c>)
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	6831      	ldr	r1, [r6, #0]
 8001e70:	4605      	mov	r5, r0
 8001e72:	b911      	cbnz	r1, 8001e7a <sbrk_aligned+0x12>
 8001e74:	f000 f9d6 	bl	8002224 <_sbrk_r>
 8001e78:	6030      	str	r0, [r6, #0]
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f000 f9d1 	bl	8002224 <_sbrk_r>
 8001e82:	1c43      	adds	r3, r0, #1
 8001e84:	d00a      	beq.n	8001e9c <sbrk_aligned+0x34>
 8001e86:	1cc4      	adds	r4, r0, #3
 8001e88:	f024 0403 	bic.w	r4, r4, #3
 8001e8c:	42a0      	cmp	r0, r4
 8001e8e:	d007      	beq.n	8001ea0 <sbrk_aligned+0x38>
 8001e90:	1a21      	subs	r1, r4, r0
 8001e92:	4628      	mov	r0, r5
 8001e94:	f000 f9c6 	bl	8002224 <_sbrk_r>
 8001e98:	3001      	adds	r0, #1
 8001e9a:	d101      	bne.n	8001ea0 <sbrk_aligned+0x38>
 8001e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
 8001ea4:	2000021c 	.word	0x2000021c

08001ea8 <_malloc_r>:
 8001ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eac:	1ccd      	adds	r5, r1, #3
 8001eae:	f025 0503 	bic.w	r5, r5, #3
 8001eb2:	3508      	adds	r5, #8
 8001eb4:	2d0c      	cmp	r5, #12
 8001eb6:	bf38      	it	cc
 8001eb8:	250c      	movcc	r5, #12
 8001eba:	2d00      	cmp	r5, #0
 8001ebc:	4607      	mov	r7, r0
 8001ebe:	db01      	blt.n	8001ec4 <_malloc_r+0x1c>
 8001ec0:	42a9      	cmp	r1, r5
 8001ec2:	d905      	bls.n	8001ed0 <_malloc_r+0x28>
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	2600      	movs	r6, #0
 8001eca:	4630      	mov	r0, r6
 8001ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001fa4 <_malloc_r+0xfc>
 8001ed4:	f000 f868 	bl	8001fa8 <__malloc_lock>
 8001ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8001edc:	461c      	mov	r4, r3
 8001ede:	bb5c      	cbnz	r4, 8001f38 <_malloc_r+0x90>
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	f7ff ffc0 	bl	8001e68 <sbrk_aligned>
 8001ee8:	1c43      	adds	r3, r0, #1
 8001eea:	4604      	mov	r4, r0
 8001eec:	d155      	bne.n	8001f9a <_malloc_r+0xf2>
 8001eee:	f8d8 4000 	ldr.w	r4, [r8]
 8001ef2:	4626      	mov	r6, r4
 8001ef4:	2e00      	cmp	r6, #0
 8001ef6:	d145      	bne.n	8001f84 <_malloc_r+0xdc>
 8001ef8:	2c00      	cmp	r4, #0
 8001efa:	d048      	beq.n	8001f8e <_malloc_r+0xe6>
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	4631      	mov	r1, r6
 8001f00:	4638      	mov	r0, r7
 8001f02:	eb04 0903 	add.w	r9, r4, r3
 8001f06:	f000 f98d 	bl	8002224 <_sbrk_r>
 8001f0a:	4581      	cmp	r9, r0
 8001f0c:	d13f      	bne.n	8001f8e <_malloc_r+0xe6>
 8001f0e:	6821      	ldr	r1, [r4, #0]
 8001f10:	1a6d      	subs	r5, r5, r1
 8001f12:	4629      	mov	r1, r5
 8001f14:	4638      	mov	r0, r7
 8001f16:	f7ff ffa7 	bl	8001e68 <sbrk_aligned>
 8001f1a:	3001      	adds	r0, #1
 8001f1c:	d037      	beq.n	8001f8e <_malloc_r+0xe6>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	442b      	add	r3, r5
 8001f22:	6023      	str	r3, [r4, #0]
 8001f24:	f8d8 3000 	ldr.w	r3, [r8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d038      	beq.n	8001f9e <_malloc_r+0xf6>
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	42a2      	cmp	r2, r4
 8001f30:	d12b      	bne.n	8001f8a <_malloc_r+0xe2>
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	e00f      	b.n	8001f58 <_malloc_r+0xb0>
 8001f38:	6822      	ldr	r2, [r4, #0]
 8001f3a:	1b52      	subs	r2, r2, r5
 8001f3c:	d41f      	bmi.n	8001f7e <_malloc_r+0xd6>
 8001f3e:	2a0b      	cmp	r2, #11
 8001f40:	d917      	bls.n	8001f72 <_malloc_r+0xca>
 8001f42:	1961      	adds	r1, r4, r5
 8001f44:	42a3      	cmp	r3, r4
 8001f46:	6025      	str	r5, [r4, #0]
 8001f48:	bf18      	it	ne
 8001f4a:	6059      	strne	r1, [r3, #4]
 8001f4c:	6863      	ldr	r3, [r4, #4]
 8001f4e:	bf08      	it	eq
 8001f50:	f8c8 1000 	streq.w	r1, [r8]
 8001f54:	5162      	str	r2, [r4, r5]
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	4638      	mov	r0, r7
 8001f5a:	f104 060b 	add.w	r6, r4, #11
 8001f5e:	f000 f829 	bl	8001fb4 <__malloc_unlock>
 8001f62:	f026 0607 	bic.w	r6, r6, #7
 8001f66:	1d23      	adds	r3, r4, #4
 8001f68:	1af2      	subs	r2, r6, r3
 8001f6a:	d0ae      	beq.n	8001eca <_malloc_r+0x22>
 8001f6c:	1b9b      	subs	r3, r3, r6
 8001f6e:	50a3      	str	r3, [r4, r2]
 8001f70:	e7ab      	b.n	8001eca <_malloc_r+0x22>
 8001f72:	42a3      	cmp	r3, r4
 8001f74:	6862      	ldr	r2, [r4, #4]
 8001f76:	d1dd      	bne.n	8001f34 <_malloc_r+0x8c>
 8001f78:	f8c8 2000 	str.w	r2, [r8]
 8001f7c:	e7ec      	b.n	8001f58 <_malloc_r+0xb0>
 8001f7e:	4623      	mov	r3, r4
 8001f80:	6864      	ldr	r4, [r4, #4]
 8001f82:	e7ac      	b.n	8001ede <_malloc_r+0x36>
 8001f84:	4634      	mov	r4, r6
 8001f86:	6876      	ldr	r6, [r6, #4]
 8001f88:	e7b4      	b.n	8001ef4 <_malloc_r+0x4c>
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	e7cc      	b.n	8001f28 <_malloc_r+0x80>
 8001f8e:	230c      	movs	r3, #12
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4638      	mov	r0, r7
 8001f94:	f000 f80e 	bl	8001fb4 <__malloc_unlock>
 8001f98:	e797      	b.n	8001eca <_malloc_r+0x22>
 8001f9a:	6025      	str	r5, [r4, #0]
 8001f9c:	e7dc      	b.n	8001f58 <_malloc_r+0xb0>
 8001f9e:	605b      	str	r3, [r3, #4]
 8001fa0:	deff      	udf	#255	; 0xff
 8001fa2:	bf00      	nop
 8001fa4:	20000218 	.word	0x20000218

08001fa8 <__malloc_lock>:
 8001fa8:	4801      	ldr	r0, [pc, #4]	; (8001fb0 <__malloc_lock+0x8>)
 8001faa:	f7ff bf0e 	b.w	8001dca <__retarget_lock_acquire_recursive>
 8001fae:	bf00      	nop
 8001fb0:	20000214 	.word	0x20000214

08001fb4 <__malloc_unlock>:
 8001fb4:	4801      	ldr	r0, [pc, #4]	; (8001fbc <__malloc_unlock+0x8>)
 8001fb6:	f7ff bf09 	b.w	8001dcc <__retarget_lock_release_recursive>
 8001fba:	bf00      	nop
 8001fbc:	20000214 	.word	0x20000214

08001fc0 <__sflush_r>:
 8001fc0:	898a      	ldrh	r2, [r1, #12]
 8001fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	0710      	lsls	r0, r2, #28
 8001fca:	460c      	mov	r4, r1
 8001fcc:	d458      	bmi.n	8002080 <__sflush_r+0xc0>
 8001fce:	684b      	ldr	r3, [r1, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dc05      	bgt.n	8001fe0 <__sflush_r+0x20>
 8001fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	dc02      	bgt.n	8001fe0 <__sflush_r+0x20>
 8001fda:	2000      	movs	r0, #0
 8001fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fe2:	2e00      	cmp	r6, #0
 8001fe4:	d0f9      	beq.n	8001fda <__sflush_r+0x1a>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fec:	682f      	ldr	r7, [r5, #0]
 8001fee:	6a21      	ldr	r1, [r4, #32]
 8001ff0:	602b      	str	r3, [r5, #0]
 8001ff2:	d032      	beq.n	800205a <__sflush_r+0x9a>
 8001ff4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ff6:	89a3      	ldrh	r3, [r4, #12]
 8001ff8:	075a      	lsls	r2, r3, #29
 8001ffa:	d505      	bpl.n	8002008 <__sflush_r+0x48>
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	1ac0      	subs	r0, r0, r3
 8002000:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002002:	b10b      	cbz	r3, 8002008 <__sflush_r+0x48>
 8002004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002006:	1ac0      	subs	r0, r0, r3
 8002008:	2300      	movs	r3, #0
 800200a:	4602      	mov	r2, r0
 800200c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800200e:	6a21      	ldr	r1, [r4, #32]
 8002010:	4628      	mov	r0, r5
 8002012:	47b0      	blx	r6
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	d106      	bne.n	8002028 <__sflush_r+0x68>
 800201a:	6829      	ldr	r1, [r5, #0]
 800201c:	291d      	cmp	r1, #29
 800201e:	d82b      	bhi.n	8002078 <__sflush_r+0xb8>
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <__sflush_r+0x108>)
 8002022:	410a      	asrs	r2, r1
 8002024:	07d6      	lsls	r6, r2, #31
 8002026:	d427      	bmi.n	8002078 <__sflush_r+0xb8>
 8002028:	2200      	movs	r2, #0
 800202a:	6062      	str	r2, [r4, #4]
 800202c:	04d9      	lsls	r1, r3, #19
 800202e:	6922      	ldr	r2, [r4, #16]
 8002030:	6022      	str	r2, [r4, #0]
 8002032:	d504      	bpl.n	800203e <__sflush_r+0x7e>
 8002034:	1c42      	adds	r2, r0, #1
 8002036:	d101      	bne.n	800203c <__sflush_r+0x7c>
 8002038:	682b      	ldr	r3, [r5, #0]
 800203a:	b903      	cbnz	r3, 800203e <__sflush_r+0x7e>
 800203c:	6560      	str	r0, [r4, #84]	; 0x54
 800203e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002040:	602f      	str	r7, [r5, #0]
 8002042:	2900      	cmp	r1, #0
 8002044:	d0c9      	beq.n	8001fda <__sflush_r+0x1a>
 8002046:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800204a:	4299      	cmp	r1, r3
 800204c:	d002      	beq.n	8002054 <__sflush_r+0x94>
 800204e:	4628      	mov	r0, r5
 8002050:	f7ff febe 	bl	8001dd0 <_free_r>
 8002054:	2000      	movs	r0, #0
 8002056:	6360      	str	r0, [r4, #52]	; 0x34
 8002058:	e7c0      	b.n	8001fdc <__sflush_r+0x1c>
 800205a:	2301      	movs	r3, #1
 800205c:	4628      	mov	r0, r5
 800205e:	47b0      	blx	r6
 8002060:	1c41      	adds	r1, r0, #1
 8002062:	d1c8      	bne.n	8001ff6 <__sflush_r+0x36>
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0c5      	beq.n	8001ff6 <__sflush_r+0x36>
 800206a:	2b1d      	cmp	r3, #29
 800206c:	d001      	beq.n	8002072 <__sflush_r+0xb2>
 800206e:	2b16      	cmp	r3, #22
 8002070:	d101      	bne.n	8002076 <__sflush_r+0xb6>
 8002072:	602f      	str	r7, [r5, #0]
 8002074:	e7b1      	b.n	8001fda <__sflush_r+0x1a>
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207c:	81a3      	strh	r3, [r4, #12]
 800207e:	e7ad      	b.n	8001fdc <__sflush_r+0x1c>
 8002080:	690f      	ldr	r7, [r1, #16]
 8002082:	2f00      	cmp	r7, #0
 8002084:	d0a9      	beq.n	8001fda <__sflush_r+0x1a>
 8002086:	0793      	lsls	r3, r2, #30
 8002088:	680e      	ldr	r6, [r1, #0]
 800208a:	bf08      	it	eq
 800208c:	694b      	ldreq	r3, [r1, #20]
 800208e:	600f      	str	r7, [r1, #0]
 8002090:	bf18      	it	ne
 8002092:	2300      	movne	r3, #0
 8002094:	eba6 0807 	sub.w	r8, r6, r7
 8002098:	608b      	str	r3, [r1, #8]
 800209a:	f1b8 0f00 	cmp.w	r8, #0
 800209e:	dd9c      	ble.n	8001fda <__sflush_r+0x1a>
 80020a0:	6a21      	ldr	r1, [r4, #32]
 80020a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020a4:	4643      	mov	r3, r8
 80020a6:	463a      	mov	r2, r7
 80020a8:	4628      	mov	r0, r5
 80020aa:	47b0      	blx	r6
 80020ac:	2800      	cmp	r0, #0
 80020ae:	dc06      	bgt.n	80020be <__sflush_r+0xfe>
 80020b0:	89a3      	ldrh	r3, [r4, #12]
 80020b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b6:	81a3      	strh	r3, [r4, #12]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	e78e      	b.n	8001fdc <__sflush_r+0x1c>
 80020be:	4407      	add	r7, r0
 80020c0:	eba8 0800 	sub.w	r8, r8, r0
 80020c4:	e7e9      	b.n	800209a <__sflush_r+0xda>
 80020c6:	bf00      	nop
 80020c8:	dfbffffe 	.word	0xdfbffffe

080020cc <_fflush_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	690b      	ldr	r3, [r1, #16]
 80020d0:	4605      	mov	r5, r0
 80020d2:	460c      	mov	r4, r1
 80020d4:	b913      	cbnz	r3, 80020dc <_fflush_r+0x10>
 80020d6:	2500      	movs	r5, #0
 80020d8:	4628      	mov	r0, r5
 80020da:	bd38      	pop	{r3, r4, r5, pc}
 80020dc:	b118      	cbz	r0, 80020e6 <_fflush_r+0x1a>
 80020de:	6a03      	ldr	r3, [r0, #32]
 80020e0:	b90b      	cbnz	r3, 80020e6 <_fflush_r+0x1a>
 80020e2:	f7ff fc95 	bl	8001a10 <__sinit>
 80020e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f3      	beq.n	80020d6 <_fflush_r+0xa>
 80020ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80020f0:	07d0      	lsls	r0, r2, #31
 80020f2:	d404      	bmi.n	80020fe <_fflush_r+0x32>
 80020f4:	0599      	lsls	r1, r3, #22
 80020f6:	d402      	bmi.n	80020fe <_fflush_r+0x32>
 80020f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020fa:	f7ff fe66 	bl	8001dca <__retarget_lock_acquire_recursive>
 80020fe:	4628      	mov	r0, r5
 8002100:	4621      	mov	r1, r4
 8002102:	f7ff ff5d 	bl	8001fc0 <__sflush_r>
 8002106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002108:	07da      	lsls	r2, r3, #31
 800210a:	4605      	mov	r5, r0
 800210c:	d4e4      	bmi.n	80020d8 <_fflush_r+0xc>
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	059b      	lsls	r3, r3, #22
 8002112:	d4e1      	bmi.n	80020d8 <_fflush_r+0xc>
 8002114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002116:	f7ff fe59 	bl	8001dcc <__retarget_lock_release_recursive>
 800211a:	e7dd      	b.n	80020d8 <_fflush_r+0xc>

0800211c <__swhatbuf_r>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	460c      	mov	r4, r1
 8002120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002124:	2900      	cmp	r1, #0
 8002126:	b096      	sub	sp, #88	; 0x58
 8002128:	4615      	mov	r5, r2
 800212a:	461e      	mov	r6, r3
 800212c:	da0d      	bge.n	800214a <__swhatbuf_r+0x2e>
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	bf0c      	ite	eq
 800213a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800213e:	2340      	movne	r3, #64	; 0x40
 8002140:	2000      	movs	r0, #0
 8002142:	6031      	str	r1, [r6, #0]
 8002144:	602b      	str	r3, [r5, #0]
 8002146:	b016      	add	sp, #88	; 0x58
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	466a      	mov	r2, sp
 800214c:	f000 f848 	bl	80021e0 <_fstat_r>
 8002150:	2800      	cmp	r0, #0
 8002152:	dbec      	blt.n	800212e <__swhatbuf_r+0x12>
 8002154:	9901      	ldr	r1, [sp, #4]
 8002156:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800215a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800215e:	4259      	negs	r1, r3
 8002160:	4159      	adcs	r1, r3
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	e7eb      	b.n	8002140 <__swhatbuf_r+0x24>

08002168 <__smakebuf_r>:
 8002168:	898b      	ldrh	r3, [r1, #12]
 800216a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800216c:	079d      	lsls	r5, r3, #30
 800216e:	4606      	mov	r6, r0
 8002170:	460c      	mov	r4, r1
 8002172:	d507      	bpl.n	8002184 <__smakebuf_r+0x1c>
 8002174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	6123      	str	r3, [r4, #16]
 800217c:	2301      	movs	r3, #1
 800217e:	6163      	str	r3, [r4, #20]
 8002180:	b002      	add	sp, #8
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	ab01      	add	r3, sp, #4
 8002186:	466a      	mov	r2, sp
 8002188:	f7ff ffc8 	bl	800211c <__swhatbuf_r>
 800218c:	9900      	ldr	r1, [sp, #0]
 800218e:	4605      	mov	r5, r0
 8002190:	4630      	mov	r0, r6
 8002192:	f7ff fe89 	bl	8001ea8 <_malloc_r>
 8002196:	b948      	cbnz	r0, 80021ac <__smakebuf_r+0x44>
 8002198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219c:	059a      	lsls	r2, r3, #22
 800219e:	d4ef      	bmi.n	8002180 <__smakebuf_r+0x18>
 80021a0:	f023 0303 	bic.w	r3, r3, #3
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	81a3      	strh	r3, [r4, #12]
 80021aa:	e7e3      	b.n	8002174 <__smakebuf_r+0xc>
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	6020      	str	r0, [r4, #0]
 80021b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b4:	81a3      	strh	r3, [r4, #12]
 80021b6:	9b00      	ldr	r3, [sp, #0]
 80021b8:	6163      	str	r3, [r4, #20]
 80021ba:	9b01      	ldr	r3, [sp, #4]
 80021bc:	6120      	str	r0, [r4, #16]
 80021be:	b15b      	cbz	r3, 80021d8 <__smakebuf_r+0x70>
 80021c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021c4:	4630      	mov	r0, r6
 80021c6:	f000 f81d 	bl	8002204 <_isatty_r>
 80021ca:	b128      	cbz	r0, 80021d8 <__smakebuf_r+0x70>
 80021cc:	89a3      	ldrh	r3, [r4, #12]
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	81a3      	strh	r3, [r4, #12]
 80021d8:	89a3      	ldrh	r3, [r4, #12]
 80021da:	431d      	orrs	r5, r3
 80021dc:	81a5      	strh	r5, [r4, #12]
 80021de:	e7cf      	b.n	8002180 <__smakebuf_r+0x18>

080021e0 <_fstat_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4d07      	ldr	r5, [pc, #28]	; (8002200 <_fstat_r+0x20>)
 80021e4:	2300      	movs	r3, #0
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	602b      	str	r3, [r5, #0]
 80021ee:	f000 f96c 	bl	80024ca <_fstat>
 80021f2:	1c43      	adds	r3, r0, #1
 80021f4:	d102      	bne.n	80021fc <_fstat_r+0x1c>
 80021f6:	682b      	ldr	r3, [r5, #0]
 80021f8:	b103      	cbz	r3, 80021fc <_fstat_r+0x1c>
 80021fa:	6023      	str	r3, [r4, #0]
 80021fc:	bd38      	pop	{r3, r4, r5, pc}
 80021fe:	bf00      	nop
 8002200:	20000210 	.word	0x20000210

08002204 <_isatty_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4d06      	ldr	r5, [pc, #24]	; (8002220 <_isatty_r+0x1c>)
 8002208:	2300      	movs	r3, #0
 800220a:	4604      	mov	r4, r0
 800220c:	4608      	mov	r0, r1
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	f000 f969 	bl	80024e6 <_isatty>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	d102      	bne.n	800221e <_isatty_r+0x1a>
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	b103      	cbz	r3, 800221e <_isatty_r+0x1a>
 800221c:	6023      	str	r3, [r4, #0]
 800221e:	bd38      	pop	{r3, r4, r5, pc}
 8002220:	20000210 	.word	0x20000210

08002224 <_sbrk_r>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4d06      	ldr	r5, [pc, #24]	; (8002240 <_sbrk_r+0x1c>)
 8002228:	2300      	movs	r3, #0
 800222a:	4604      	mov	r4, r0
 800222c:	4608      	mov	r0, r1
 800222e:	602b      	str	r3, [r5, #0]
 8002230:	f000 f906 	bl	8002440 <_sbrk>
 8002234:	1c43      	adds	r3, r0, #1
 8002236:	d102      	bne.n	800223e <_sbrk_r+0x1a>
 8002238:	682b      	ldr	r3, [r5, #0]
 800223a:	b103      	cbz	r3, 800223e <_sbrk_r+0x1a>
 800223c:	6023      	str	r3, [r4, #0]
 800223e:	bd38      	pop	{r3, r4, r5, pc}
 8002240:	20000210 	.word	0x20000210

08002244 <findslot>:
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <findslot+0x2c>)
 8002246:	b510      	push	{r4, lr}
 8002248:	4604      	mov	r4, r0
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	b118      	cbz	r0, 8002256 <findslot+0x12>
 800224e:	6a03      	ldr	r3, [r0, #32]
 8002250:	b90b      	cbnz	r3, 8002256 <findslot+0x12>
 8002252:	f7ff fbdd 	bl	8001a10 <__sinit>
 8002256:	2c13      	cmp	r4, #19
 8002258:	d807      	bhi.n	800226a <findslot+0x26>
 800225a:	4806      	ldr	r0, [pc, #24]	; (8002274 <findslot+0x30>)
 800225c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002260:	3201      	adds	r2, #1
 8002262:	d002      	beq.n	800226a <findslot+0x26>
 8002264:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002268:	bd10      	pop	{r4, pc}
 800226a:	2000      	movs	r0, #0
 800226c:	e7fc      	b.n	8002268 <findslot+0x24>
 800226e:	bf00      	nop
 8002270:	20000070 	.word	0x20000070
 8002274:	20000224 	.word	0x20000224

08002278 <error>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	4604      	mov	r4, r0
 800227c:	f000 f950 	bl	8002520 <__errno>
 8002280:	2613      	movs	r6, #19
 8002282:	4605      	mov	r5, r0
 8002284:	2700      	movs	r7, #0
 8002286:	4630      	mov	r0, r6
 8002288:	4639      	mov	r1, r7
 800228a:	beab      	bkpt	0x00ab
 800228c:	4606      	mov	r6, r0
 800228e:	602e      	str	r6, [r5, #0]
 8002290:	4620      	mov	r0, r4
 8002292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002294 <checkerror>:
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d101      	bne.n	800229c <checkerror+0x8>
 8002298:	f7ff bfee 	b.w	8002278 <error>
 800229c:	4770      	bx	lr

0800229e <_swiread>:
 800229e:	b530      	push	{r4, r5, lr}
 80022a0:	b085      	sub	sp, #20
 80022a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80022a6:	9203      	str	r2, [sp, #12]
 80022a8:	2406      	movs	r4, #6
 80022aa:	ad01      	add	r5, sp, #4
 80022ac:	4620      	mov	r0, r4
 80022ae:	4629      	mov	r1, r5
 80022b0:	beab      	bkpt	0x00ab
 80022b2:	4604      	mov	r4, r0
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff ffed 	bl	8002294 <checkerror>
 80022ba:	b005      	add	sp, #20
 80022bc:	bd30      	pop	{r4, r5, pc}

080022be <_read>:
 80022be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022c0:	4615      	mov	r5, r2
 80022c2:	9101      	str	r1, [sp, #4]
 80022c4:	f7ff ffbe 	bl	8002244 <findslot>
 80022c8:	9901      	ldr	r1, [sp, #4]
 80022ca:	4604      	mov	r4, r0
 80022cc:	b938      	cbnz	r0, 80022de <_read+0x20>
 80022ce:	f000 f927 	bl	8002520 <__errno>
 80022d2:	2309      	movs	r3, #9
 80022d4:	6003      	str	r3, [r0, #0]
 80022d6:	f04f 30ff 	mov.w	r0, #4294967295
 80022da:	b003      	add	sp, #12
 80022dc:	bd30      	pop	{r4, r5, pc}
 80022de:	6800      	ldr	r0, [r0, #0]
 80022e0:	462a      	mov	r2, r5
 80022e2:	f7ff ffdc 	bl	800229e <_swiread>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	d0f7      	beq.n	80022da <_read+0x1c>
 80022ea:	6863      	ldr	r3, [r4, #4]
 80022ec:	1a2a      	subs	r2, r5, r0
 80022ee:	4413      	add	r3, r2
 80022f0:	6063      	str	r3, [r4, #4]
 80022f2:	4610      	mov	r0, r2
 80022f4:	e7f1      	b.n	80022da <_read+0x1c>

080022f6 <_swilseek>:
 80022f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022f8:	460c      	mov	r4, r1
 80022fa:	4616      	mov	r6, r2
 80022fc:	f7ff ffa2 	bl	8002244 <findslot>
 8002300:	4605      	mov	r5, r0
 8002302:	b940      	cbnz	r0, 8002316 <_swilseek+0x20>
 8002304:	f000 f90c 	bl	8002520 <__errno>
 8002308:	2309      	movs	r3, #9
 800230a:	6003      	str	r3, [r0, #0]
 800230c:	f04f 34ff 	mov.w	r4, #4294967295
 8002310:	4620      	mov	r0, r4
 8002312:	b003      	add	sp, #12
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002316:	2e02      	cmp	r6, #2
 8002318:	d903      	bls.n	8002322 <_swilseek+0x2c>
 800231a:	f000 f901 	bl	8002520 <__errno>
 800231e:	2316      	movs	r3, #22
 8002320:	e7f3      	b.n	800230a <_swilseek+0x14>
 8002322:	2e01      	cmp	r6, #1
 8002324:	d112      	bne.n	800234c <_swilseek+0x56>
 8002326:	6843      	ldr	r3, [r0, #4]
 8002328:	18e4      	adds	r4, r4, r3
 800232a:	d4f6      	bmi.n	800231a <_swilseek+0x24>
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	260a      	movs	r6, #10
 8002330:	e9cd 3400 	strd	r3, r4, [sp]
 8002334:	466f      	mov	r7, sp
 8002336:	4630      	mov	r0, r6
 8002338:	4639      	mov	r1, r7
 800233a:	beab      	bkpt	0x00ab
 800233c:	4606      	mov	r6, r0
 800233e:	4630      	mov	r0, r6
 8002340:	f7ff ffa8 	bl	8002294 <checkerror>
 8002344:	2800      	cmp	r0, #0
 8002346:	dbe1      	blt.n	800230c <_swilseek+0x16>
 8002348:	606c      	str	r4, [r5, #4]
 800234a:	e7e1      	b.n	8002310 <_swilseek+0x1a>
 800234c:	2e02      	cmp	r6, #2
 800234e:	6803      	ldr	r3, [r0, #0]
 8002350:	d1ec      	bne.n	800232c <_swilseek+0x36>
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	260c      	movs	r6, #12
 8002356:	466f      	mov	r7, sp
 8002358:	4630      	mov	r0, r6
 800235a:	4639      	mov	r1, r7
 800235c:	beab      	bkpt	0x00ab
 800235e:	4606      	mov	r6, r0
 8002360:	4630      	mov	r0, r6
 8002362:	f7ff ff97 	bl	8002294 <checkerror>
 8002366:	1c43      	adds	r3, r0, #1
 8002368:	d0d0      	beq.n	800230c <_swilseek+0x16>
 800236a:	4404      	add	r4, r0
 800236c:	e7de      	b.n	800232c <_swilseek+0x36>

0800236e <_lseek>:
 800236e:	f7ff bfc2 	b.w	80022f6 <_swilseek>

08002372 <_swiwrite>:
 8002372:	b530      	push	{r4, r5, lr}
 8002374:	b085      	sub	sp, #20
 8002376:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800237a:	9203      	str	r2, [sp, #12]
 800237c:	2405      	movs	r4, #5
 800237e:	ad01      	add	r5, sp, #4
 8002380:	4620      	mov	r0, r4
 8002382:	4629      	mov	r1, r5
 8002384:	beab      	bkpt	0x00ab
 8002386:	4604      	mov	r4, r0
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff ff83 	bl	8002294 <checkerror>
 800238e:	b005      	add	sp, #20
 8002390:	bd30      	pop	{r4, r5, pc}

08002392 <_write>:
 8002392:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002394:	4615      	mov	r5, r2
 8002396:	9101      	str	r1, [sp, #4]
 8002398:	f7ff ff54 	bl	8002244 <findslot>
 800239c:	9901      	ldr	r1, [sp, #4]
 800239e:	4604      	mov	r4, r0
 80023a0:	b930      	cbnz	r0, 80023b0 <_write+0x1e>
 80023a2:	f000 f8bd 	bl	8002520 <__errno>
 80023a6:	2309      	movs	r3, #9
 80023a8:	6003      	str	r3, [r0, #0]
 80023aa:	f04f 30ff 	mov.w	r0, #4294967295
 80023ae:	e012      	b.n	80023d6 <_write+0x44>
 80023b0:	6800      	ldr	r0, [r0, #0]
 80023b2:	462a      	mov	r2, r5
 80023b4:	f7ff ffdd 	bl	8002372 <_swiwrite>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	dbf6      	blt.n	80023aa <_write+0x18>
 80023bc:	6862      	ldr	r2, [r4, #4]
 80023be:	1a2b      	subs	r3, r5, r0
 80023c0:	441a      	add	r2, r3
 80023c2:	42a8      	cmp	r0, r5
 80023c4:	6062      	str	r2, [r4, #4]
 80023c6:	d105      	bne.n	80023d4 <_write+0x42>
 80023c8:	2000      	movs	r0, #0
 80023ca:	b003      	add	sp, #12
 80023cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023d0:	f7ff bf52 	b.w	8002278 <error>
 80023d4:	4618      	mov	r0, r3
 80023d6:	b003      	add	sp, #12
 80023d8:	bd30      	pop	{r4, r5, pc}

080023da <_swiclose>:
 80023da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023dc:	2402      	movs	r4, #2
 80023de:	9001      	str	r0, [sp, #4]
 80023e0:	ad01      	add	r5, sp, #4
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	beab      	bkpt	0x00ab
 80023e8:	4604      	mov	r4, r0
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff ff52 	bl	8002294 <checkerror>
 80023f0:	b003      	add	sp, #12
 80023f2:	bd30      	pop	{r4, r5, pc}

080023f4 <_close>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4605      	mov	r5, r0
 80023f8:	f7ff ff24 	bl	8002244 <findslot>
 80023fc:	4604      	mov	r4, r0
 80023fe:	b930      	cbnz	r0, 800240e <_close+0x1a>
 8002400:	f000 f88e 	bl	8002520 <__errno>
 8002404:	2309      	movs	r3, #9
 8002406:	6003      	str	r3, [r0, #0]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	bd38      	pop	{r3, r4, r5, pc}
 800240e:	3d01      	subs	r5, #1
 8002410:	2d01      	cmp	r5, #1
 8002412:	d809      	bhi.n	8002428 <_close+0x34>
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <_close+0x48>)
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	429a      	cmp	r2, r3
 800241c:	d104      	bne.n	8002428 <_close+0x34>
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	6003      	str	r3, [r0, #0]
 8002424:	2000      	movs	r0, #0
 8002426:	e7f1      	b.n	800240c <_close+0x18>
 8002428:	6820      	ldr	r0, [r4, #0]
 800242a:	f7ff ffd6 	bl	80023da <_swiclose>
 800242e:	2800      	cmp	r0, #0
 8002430:	d1ec      	bne.n	800240c <_close+0x18>
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	6023      	str	r3, [r4, #0]
 8002438:	e7e8      	b.n	800240c <_close+0x18>
 800243a:	bf00      	nop
 800243c:	20000224 	.word	0x20000224

08002440 <_sbrk>:
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <_sbrk+0x38>)
 8002442:	6811      	ldr	r1, [r2, #0]
 8002444:	b510      	push	{r4, lr}
 8002446:	4603      	mov	r3, r0
 8002448:	b909      	cbnz	r1, 800244e <_sbrk+0xe>
 800244a:	490c      	ldr	r1, [pc, #48]	; (800247c <_sbrk+0x3c>)
 800244c:	6011      	str	r1, [r2, #0]
 800244e:	6810      	ldr	r0, [r2, #0]
 8002450:	4669      	mov	r1, sp
 8002452:	4403      	add	r3, r0
 8002454:	428b      	cmp	r3, r1
 8002456:	d806      	bhi.n	8002466 <_sbrk+0x26>
 8002458:	4909      	ldr	r1, [pc, #36]	; (8002480 <_sbrk+0x40>)
 800245a:	4c0a      	ldr	r4, [pc, #40]	; (8002484 <_sbrk+0x44>)
 800245c:	6809      	ldr	r1, [r1, #0]
 800245e:	42a1      	cmp	r1, r4
 8002460:	d008      	beq.n	8002474 <_sbrk+0x34>
 8002462:	428b      	cmp	r3, r1
 8002464:	d906      	bls.n	8002474 <_sbrk+0x34>
 8002466:	f000 f85b 	bl	8002520 <__errno>
 800246a:	230c      	movs	r3, #12
 800246c:	6003      	str	r3, [r0, #0]
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
 8002472:	bd10      	pop	{r4, pc}
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e7fc      	b.n	8002472 <_sbrk+0x32>
 8002478:	20000220 	.word	0x20000220
 800247c:	200002c8 	.word	0x200002c8
 8002480:	20000074 	.word	0x20000074
 8002484:	cafedead 	.word	0xcafedead

08002488 <_swistat>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	460c      	mov	r4, r1
 800248c:	f7ff feda 	bl	8002244 <findslot>
 8002490:	4605      	mov	r5, r0
 8002492:	b930      	cbnz	r0, 80024a2 <_swistat+0x1a>
 8002494:	f000 f844 	bl	8002520 <__errno>
 8002498:	2309      	movs	r3, #9
 800249a:	6003      	str	r3, [r0, #0]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a8:	6063      	str	r3, [r4, #4]
 80024aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ae:	64a3      	str	r3, [r4, #72]	; 0x48
 80024b0:	260c      	movs	r6, #12
 80024b2:	4630      	mov	r0, r6
 80024b4:	4629      	mov	r1, r5
 80024b6:	beab      	bkpt	0x00ab
 80024b8:	4605      	mov	r5, r0
 80024ba:	4628      	mov	r0, r5
 80024bc:	f7ff feea 	bl	8002294 <checkerror>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	bf1c      	itt	ne
 80024c4:	6120      	strne	r0, [r4, #16]
 80024c6:	2000      	movne	r0, #0
 80024c8:	e7ea      	b.n	80024a0 <_swistat+0x18>

080024ca <_fstat>:
 80024ca:	460b      	mov	r3, r1
 80024cc:	b510      	push	{r4, lr}
 80024ce:	2100      	movs	r1, #0
 80024d0:	4604      	mov	r4, r0
 80024d2:	2258      	movs	r2, #88	; 0x58
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fc05 	bl	8001ce4 <memset>
 80024da:	4601      	mov	r1, r0
 80024dc:	4620      	mov	r0, r4
 80024de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e2:	f7ff bfd1 	b.w	8002488 <_swistat>

080024e6 <_isatty>:
 80024e6:	b570      	push	{r4, r5, r6, lr}
 80024e8:	f7ff feac 	bl	8002244 <findslot>
 80024ec:	2509      	movs	r5, #9
 80024ee:	4604      	mov	r4, r0
 80024f0:	b920      	cbnz	r0, 80024fc <_isatty+0x16>
 80024f2:	f000 f815 	bl	8002520 <__errno>
 80024f6:	6005      	str	r5, [r0, #0]
 80024f8:	4620      	mov	r0, r4
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	4628      	mov	r0, r5
 80024fe:	4621      	mov	r1, r4
 8002500:	beab      	bkpt	0x00ab
 8002502:	4604      	mov	r4, r0
 8002504:	2c01      	cmp	r4, #1
 8002506:	d0f7      	beq.n	80024f8 <_isatty+0x12>
 8002508:	f000 f80a 	bl	8002520 <__errno>
 800250c:	2400      	movs	r4, #0
 800250e:	4605      	mov	r5, r0
 8002510:	2613      	movs	r6, #19
 8002512:	4630      	mov	r0, r6
 8002514:	4621      	mov	r1, r4
 8002516:	beab      	bkpt	0x00ab
 8002518:	4606      	mov	r6, r0
 800251a:	602e      	str	r6, [r5, #0]
 800251c:	e7ec      	b.n	80024f8 <_isatty+0x12>
	...

08002520 <__errno>:
 8002520:	4b01      	ldr	r3, [pc, #4]	; (8002528 <__errno+0x8>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000070 	.word	0x20000070

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
